#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para verificar e corrigir o usu√°rio admin atual
"""

import sys
import os

# Adicionar pasta raiz ao path
sys.path.append('.')

from database.connection import get_database
from utils.auth import WebAuth

def verificar_usuario_admin_atual():
    """Verificar o usu√°rio admin no banco e suas permiss√µes"""
    print("üîç VERIFICA√á√ÉO DO USU√ÅRIO ADMIN")
    print("=" * 50)
    
    try:
        db = get_database()
        
        # Buscar todos os usu√°rios
        print("1. Buscando todos os usu√°rios...")
        usuarios = db.execute_query("SELECT * FROM usuarios ORDER BY id")
        
        if usuarios:
            print(f"   ‚úÖ Encontrados {len(usuarios)} usu√°rios:")
            for user in usuarios:
                print(f"      - ID: {user.get('id')}")
                print(f"        Usu√°rio: {user.get('usuario')}")
                print(f"        Nome: {user.get('nome')}")
                print(f"        Role: {user.get('role')}")
                print(f"        Ativo: {user.get('ativo')}")
                print("      ---")
        else:
            print("   ‚ùå Nenhum usu√°rio encontrado!")
            return False
        
        # Verificar especificamente o usu√°rio admin
        print("2. Verificando usu√°rio admin...")
        admin = db.execute_query("SELECT * FROM usuarios WHERE usuario = 'admin'")
        
        if admin:
            admin_user = admin[0]
            print("   ‚úÖ Usu√°rio admin encontrado:")
            print(f"      - ID: {admin_user.get('id')}")
            print(f"      - Nome: {admin_user.get('nome')}")
            print(f"      - Role: {admin_user.get('role')}")
            print(f"      - Ativo: {admin_user.get('ativo')}")
            
            # Verificar se role √© admin
            if admin_user.get('role') != 'admin':
                print("   ‚ö†Ô∏è Role n√£o √© 'admin', corrigindo...")
                success = db.execute_update("UPDATE usuarios SET role = 'admin' WHERE usuario = 'admin'")
                if success:
                    print("   ‚úÖ Role corrigida para 'admin'!")
                else:
                    print("   ‚ùå Erro ao corrigir role!")
            
            # Verificar se est√° ativo
            if not admin_user.get('ativo'):
                print("   ‚ö†Ô∏è Usu√°rio n√£o est√° ativo, corrigindo...")
                success = db.execute_update("UPDATE usuarios SET ativo = 1 WHERE usuario = 'admin'")
                if success:
                    print("   ‚úÖ Usu√°rio ativado!")
                else:
                    print("   ‚ùå Erro ao ativar usu√°rio!")
        else:
            print("   ‚ùå Usu√°rio admin n√£o encontrado!")
            
            # Criar usu√°rio admin
            print("3. Criando usu√°rio admin...")
            auth = WebAuth()
            senha_hash = auth.hash_password("admin123")
            
            success = db.execute_update("""
                INSERT INTO usuarios (usuario, nome, senha, role, ativo)
                VALUES ('admin', 'Administrador', ?, 'admin', 1)
            """, (senha_hash,))
            
            if success:
                print("   ‚úÖ Usu√°rio admin criado!")
            else:
                print("   ‚ùå Erro ao criar usu√°rio admin!")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante verifica√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def testar_login_admin():
    """Testar se √© poss√≠vel fazer login com admin"""
    print("\nüîê TESTE DE LOGIN ADMIN")
    print("=" * 50)
    
    try:
        auth = WebAuth()
        
        print("1. Tentando login como admin...")
        
        # Simular login (sem interface Streamlit)
        db = get_database()
        user_data = db.execute_query("SELECT * FROM usuarios WHERE usuario = 'admin' AND ativo = 1")
        
        if user_data:
            user = user_data[0]
            print("   ‚úÖ Usu√°rio encontrado para login:")
            print(f"      - Role: {user.get('role')}")
            print(f"      - Senha armazenada: {'Sim' if user.get('senha') else 'N√£o'}")
            
            # Verificar senha
            if auth.verify_password("admin123", user.get('senha', '')):
                print("   ‚úÖ Senha v√°lida!")
                
                # Verificar permiss√µes
                if user.get('role') == 'admin':
                    print("   ‚úÖ Usu√°rio tem permiss√µes de admin!")
                    return True
                else:
                    print(f"   ‚ùå Role incorreta: {user.get('role')}")
                    return False
            else:
                print("   ‚ùå Senha inv√°lida!")
                return False
        else:
            print("   ‚ùå Usu√°rio n√£o encontrado ou inativo!")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro durante teste de login: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Executar verifica√ß√µes"""
    print("üß™ VERIFICA√á√ÉO COMPLETA DO USU√ÅRIO ADMIN")
    print("=" * 60)
    
    # Mudar para o diret√≥rio correto
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    
    # Executar verifica√ß√µes
    usuario_ok = verificar_usuario_admin_atual()
    login_ok = testar_login_admin() if usuario_ok else False
    
    print("\n" + "=" * 60)
    if usuario_ok and login_ok:
        print("üéâ TUDO OK: Usu√°rio admin configurado corretamente!")
        print("\nüí° PR√ìXIMOS PASSOS:")
        print("   1. Acesse http://localhost:8545")
        print("   2. Fa√ßa login com: admin / admin123")
        print("   3. V√° em Configura√ß√µes ‚Üí aba 'Usu√°rios'")
        print("   4. Agora voc√™ deve conseguir gerenciar usu√°rios!")
    else:
        print("üí• PROBLEMAS ENCONTRADOS!")
        print("   Corrija os problemas acima antes de continuar.")

if __name__ == "__main__":
    main()