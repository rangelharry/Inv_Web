#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Invent√°rio Web - Aplica√ß√£o Principal
Vers√£o Streamlit para acesso multiusu√°rio online
"""

import streamlit as st
import os
import sys
from datetime import datetime

# Adicionar pasta utils ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))

# Imports locais
from database.connection import init_database, get_database
from utils.auth import get_auth
from utils.backup import get_backup_manager
from utils.themes import get_theme_manager
from utils.feedback import get_feedback_manager, NotificationType

# Inicializa√ß√£o robusta do session_state
def init_session_state():
    """Inicializar todas as vari√°veis de session_state necess√°rias"""
    # Rate limiting
    if 'rate_limit_data' not in st.session_state:
        st.session_state.rate_limit_data = {}
    
    # Autentica√ß√£o
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    if 'user_data' not in st.session_state:
        st.session_state.user_data = None
    if 'login_time' not in st.session_state:
        st.session_state.login_time = None
    
    # Feedback e notifica√ß√µes
    if 'notifications' not in st.session_state:
        st.session_state.notifications = []
    if 'loading_states' not in st.session_state:
        st.session_state.loading_states = {}
    if 'user_actions' not in st.session_state:
        st.session_state.user_actions = []
    
    # Outras vari√°veis
    if 'selected_theme' not in st.session_state:
        st.session_state.selected_theme = 'default'

# Executar inicializa√ß√£o
init_session_state()

# Configura√ß√£o din√¢mica da p√°gina
# Verificar se usu√°rio est√° logado para configurar sidebar
try:
    from utils.auth import get_auth
    auth = get_auth()
    sidebar_state = "expanded" if auth.is_authenticated() else "collapsed"
except:
    sidebar_state = "collapsed"

st.set_page_config(
    page_title="Sistema de Invent√°rio Web",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state=sidebar_state,
    menu_items={
        'Get Help': None,
        'Report a bug': None,
        'About': """
        # Sistema de Invent√°rio Web v2.0
        
        Sistema completo para gest√£o de:
        - Equipamentos El√©tricos e Manuais
        - Insumos e Materiais
        - Obra/Departamento
        - Movimenta√ß√µes e Relat√≥rios
        
        **Desenvolvido com Streamlit**
        """
    }
)

# CSS personalizado - Aplicar tema atual
theme_manager = get_theme_manager()
st.markdown(theme_manager.apply_theme_css(), unsafe_allow_html=True)

def show_header():
    """Exibir header da aplica√ß√£o"""
    feedback_manager = get_feedback_manager()
    
    # Header principal com anima√ß√£o
    st.markdown('<h1 class="main-header fade-in">üèóÔ∏è Sistema de Invent√°rio Web</h1>', 
                unsafe_allow_html=True)
    
    # Exibir notifica√ß√µes
    feedback_manager.show_notifications()
    
    # Adicionar breadcrumb de navega√ß√£o se houver p√°gina selecionada
    current_page = st.session_state.get('navigation_select', 'üè† Dashboard')
    if current_page:
        st.markdown(f"""
        <div class="fade-in" style="
            text-align: center; 
            margin-bottom: 1.5rem;
            padding: 0.5rem;
            background: #f8f9fa;
            border-radius: 25px;
            border: 1px solid #dee2e6;
        ">
            <small style="color: #6c757d;">üìç Voc√™ est√° em: <strong>{current_page}</strong></small>
        </div>
        """, unsafe_allow_html=True)

def show_user_info():
    """Exibir informa√ß√µes do usu√°rio logado"""
    auth = get_auth()
    user = auth.get_current_user()
    
    if user:
        # Layout simplificado para sidebar
        st.markdown(f"**üë§ Usu√°rio:** {user['nome']}")
        
        login_time = st.session_state.get('login_time')
        if login_time:
            # Calcular tempo de sess√£o
            now = datetime.now()
            session_duration = now - login_time
            
            # Timeout de 30 minutos
            SESSION_TIMEOUT = 30 * 60  # em segundos
            remaining_seconds = SESSION_TIMEOUT - session_duration.total_seconds()
            
            if remaining_seconds > 0:
                remaining_minutes = int(remaining_seconds // 60)
                remaining_secs = int(remaining_seconds % 60)
                
                # Cor baseada no tempo restante
                if remaining_minutes < 5:
                    color = "üî¥"
                elif remaining_minutes < 10:
                    color = "üü°"
                else:
                    color = "üü¢"
                
                st.markdown(f"**üïê Login:** {login_time.strftime('%H:%M')}")
                st.markdown(f"**‚è±Ô∏è Sess√£o:** {color} {remaining_minutes:02d}:{remaining_secs:02d}")
                
                # Alerta quando restam menos de 5 minutos
                if remaining_minutes < 5:
                    st.warning(f"‚ö†Ô∏è Sess√£o expira em {remaining_minutes}min")
            else:
                st.error("üî¥ Sess√£o expirada")
        
        # Bot√£o de sair em linha separada
        if st.button("üö™ Sair", use_container_width=True, type="secondary"):
            feedback_manager = get_feedback_manager()
            feedback_manager.log_user_action("user_logout")
            feedback_manager.show_notification("üëã Logout realizado com sucesso!", NotificationType.INFO)
            auth.logout_user()
            st.rerun()

def show_navigation():
    """Exibir menu de navega√ß√£o lateral (apenas para usu√°rios autenticados)"""
    
    # Verificar se usu√°rio est√° autenticado antes de mostrar navega√ß√£o
    auth = get_auth()
    if not auth.is_authenticated():
        return None
    
    with st.sidebar:
        st.title("üìã Menu Principal")
        
        # Informa√ß√µes do usu√°rio
        show_user_info()
        
        st.divider()
        
        # Menu de navega√ß√£o
        pages = {
            "üè† Dashboard": "dashboard",
            "üö® Alertas": "alertas",
            "‚ö° Equipamentos El√©tricos": "equipamentos_eletricos", 
            "üîß Equipamentos Manuais": "equipamentos_manuais",
            "üì¶ Insumos": "insumos",
            "üèóÔ∏è Obras/Departamentos": "obras",
            "üìä Movimenta√ß√µes": "movimentacoes",
            "üìà Relat√≥rios": "relatorios",
            "‚öôÔ∏è Configura√ß√µes": "configuracoes"
        }
        
        # Adicionar p√°gina de logs apenas para admins
        if auth.has_permission('admin'):
            pages["üìã Logs de Auditoria"] = "logs_auditoria"
        
        # Seletor de p√°gina com feedback
        current_index = 0
        if 'navigation_select' in st.session_state:
            try:
                current_page = st.session_state.navigation_select
                if current_page in pages.keys():
                    current_index = list(pages.keys()).index(current_page)
            except:
                pass
        
        selected_page = st.selectbox(
            "Selecione uma se√ß√£o:",
            list(pages.keys()),
            index=current_index,
            key="navigation_select"
        )
        
        # Log da navega√ß√£o
        if selected_page != st.session_state.get('last_page'):
            feedback_manager = get_feedback_manager()
            feedback_manager.log_user_action("navigate", {'page': selected_page})
            st.session_state.last_page = selected_page
        
        st.divider()
        
        # Status do sistema
        st.markdown("### üìä Status do Sistema")
        
        # Testar conex√£o com banco
        try:
            db = get_database()
            result = db.execute_query("SELECT COUNT(*) as count FROM usuarios")
            if result:
                st.success("üü¢ Banco Online")
            else:
                st.error("üî¥ Banco Offline")
        except:
            st.error("üî¥ Erro de Conex√£o")
        
        # Informa√ß√µes adicionais
        st.info(f"""
        **üåê Vers√£o Web 2.0**
        
        **üìÖ Data:** {datetime.now().strftime('%d/%m/%Y')}
        
        **üïê Hora:** {datetime.now().strftime('%H:%M:%S')}
        """)
        
        return pages[selected_page]

def load_page(page_name: str):
    """
    Carregar p√°gina selecionada
    
    Args:
        page_name: Nome da p√°gina a carregar
    """
    try:
        if page_name == "dashboard":
            from pages import dashboard
            dashboard.show()
        elif page_name == "alertas":
            from pages import alertas
            alertas.show()
        elif page_name == "equipamentos_eletricos":
            from pages import equipamentos_eletricos
            equipamentos_eletricos.show()
        elif page_name == "equipamentos_manuais":
            from pages import equipamentos_manuais
            equipamentos_manuais.show()
        elif page_name == "insumos":
            from pages import insumos
            insumos.show()
        elif page_name == "obras":
            from pages import obras
            obras.show()
        elif page_name == "movimentacoes":
            from pages import movimentacoes
            movimentacoes.show()
        elif page_name == "relatorios":
            from pages import relatorios
            relatorios.show()
        elif page_name == "configuracoes":
            from pages import configuracoes
            configuracoes.show()
        elif page_name == "logs_auditoria":
            from pages import logs_auditoria
            logs_auditoria.show()
        else:
            st.error(f"‚ùå P√°gina '{page_name}' n√£o encontrada!")
            
    except ImportError as e:
        st.error(f"‚ùå Erro de importa√ß√£o na p√°gina '{page_name}': {e}")
        st.warning("‚ö†Ô∏è P√°gina em desenvolvimento...")
        st.info("Esta funcionalidade ser√° implementada em breve.")
        
        # Mostrar progresso do desenvolvimento
        if page_name == "dashboard":
            st.progress(0.9, "Dashboard - 90% conclu√≠do")
        elif page_name in ["equipamentos_eletricos", "insumos"]:
            st.progress(0.7, f"{page_name} - 70% conclu√≠do")
        else:
            st.progress(0.3, f"{page_name} - 30% conclu√≠do")
    
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar p√°gina '{page_name}': {e}")
        st.error(f"Tipo do erro: {type(e).__name__}")
        
        # Mostrar traceback para debug
        import traceback
        st.code(traceback.format_exc(), language="python")

def show_footer():
    """Exibir footer da aplica√ß√£o"""
    st.markdown("---")
    st.markdown("""
    <div class="footer">
        <p><strong>Sistema de Invent√°rio Web v2.0</strong></p>
        <p>Desenvolvido com ‚ù§Ô∏è usando Streamlit | 2025</p>
        <p>üîí Dados protegidos ‚Ä¢ üåê Acesso seguro ‚Ä¢ üìä Relat√≥rios em tempo real</p>
    </div>
    """, unsafe_allow_html=True)

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # Inicializar banco de dados
    if not init_database():
        st.error("‚ùå Erro cr√≠tico: N√£o foi poss√≠vel conectar ao banco de dados!")
        st.stop()
    
    # Sistema de autentica√ß√£o
    auth = get_auth()
    
    # Verificar se usu√°rio est√° autenticado
    if not auth.is_authenticated():
        # Limpar sidebar quando n√£o autenticado
        st.sidebar.empty()
        auth.show_login_page()
        return
    
    # Verificar timeout da sess√£o
    if not auth.check_session_timeout():
        # Limpar sidebar em caso de timeout
        st.sidebar.empty()
        st.warning("‚è∞ Sua sess√£o expirou. Fa√ßa login novamente.")
        auth.show_login_page()
        return
    
    # Interface principal (apenas ap√≥s autentica√ß√£o)
    show_header()
    
    # Menu de navega√ß√£o e carregamento de p√°gina (apenas para usu√°rios logados)
    selected_page = show_navigation()
    
    # Container principal
    if selected_page:
        with st.container():
            load_page(selected_page)
    else:
        st.error("‚ùå Erro na navega√ß√£o do sistema")
    
    # Footer
    show_footer()

def init_system():
    """Inicializar sistema e backup autom√°tico"""
    try:
        # Executar backup autom√°tico na inicializa√ß√£o (uma vez por dia)
        if 'backup_checked' not in st.session_state:
            backup_mgr = get_backup_manager()
            backup_mgr.auto_backup()  # Cria backup se necess√°rio
            st.session_state.backup_checked = True
    except Exception as e:
        # N√£o falhar a aplica√ß√£o se backup der erro
        pass

if __name__ == "__main__":
    try:
        # Inicializar sistema
        init_system()
        
        # Executar aplica√ß√£o principal
        main()
    except Exception as e:
        st.error(f"‚ùå Erro cr√≠tico na aplica√ß√£o: {e}")
        st.info("Por favor, recarregue a p√°gina ou entre em contato com o suporte.")
        
        # Mostrar detalhes do erro em modo debug
        if st.checkbox("üîç Mostrar detalhes do erro"):
            st.exception(e)