#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para verificar e corrigir estrutura do banco de dados
"""

import sqlite3
import os
import sys

def verificar_e_corrigir_banco():
    """Verificar estrutura do banco e criar tabelas se necess√°rio"""
    print("üîç VERIFICANDO ESTRUTURA DO BANCO DE DADOS")
    print("=" * 60)
    
    db_path = "database/inventario.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå Banco de dados n√£o encontrado: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Verificar tabelas existentes
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tabelas_existentes = [row[0] for row in cursor.fetchall()]
        
        print("üìã TABELAS ENCONTRADAS:")
        for tabela in tabelas_existentes:
            print(f"   ‚úÖ {tabela}")
        
        # Tabelas esperadas
        tabelas_esperadas = [
            'usuarios', 'equipamentos_eletricos', 'equipamentos_manuais', 
            'insumos', 'obras', 'movimentacoes'
        ]
        
        # Verificar tabelas faltantes
        tabelas_faltantes = [t for t in tabelas_esperadas if t not in tabelas_existentes]
        
        if tabelas_faltantes:
            print("\n‚ö†Ô∏è TABELAS FALTANTES:")
            for tabela in tabelas_faltantes:
                print(f"   ‚ùå {tabela}")
                
            print("\nüîß CRIANDO TABELAS FALTANTES...")
            
            # Criar tabela equipamentos_eletricos se n√£o existir
            if 'equipamentos_eletricos' in tabelas_faltantes:
                cursor.execute("""
                    CREATE TABLE equipamentos_eletricos (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        codigo TEXT UNIQUE NOT NULL,
                        nome TEXT NOT NULL,
                        categoria TEXT,
                        status TEXT DEFAULT 'Dispon√≠vel',
                        localizacao TEXT,
                        marca TEXT,
                        modelo TEXT,
                        valor_compra REAL,
                        observacoes TEXT
                    )
                """)
                print("   ‚úÖ Tabela equipamentos_eletricos criada")
            
            # Criar tabela equipamentos_manuais se n√£o existir
            if 'equipamentos_manuais' in tabelas_faltantes:
                cursor.execute("""
                    CREATE TABLE equipamentos_manuais (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        codigo TEXT UNIQUE NOT NULL,
                        descricao TEXT NOT NULL,
                        tipo TEXT,
                        status TEXT DEFAULT 'Dispon√≠vel',
                        localizacao TEXT,
                        quantitativo INTEGER DEFAULT 1,
                        estado TEXT,
                        marca TEXT,
                        valor REAL,
                        data_compra DATE,
                        loja TEXT,
                        observacoes TEXT
                    )
                """)
                print("   ‚úÖ Tabela equipamentos_manuais criada")
            
            # Criar tabela insumos se n√£o existir
            if 'insumos' in tabelas_faltantes:
                cursor.execute("""
                    CREATE TABLE insumos (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        codigo TEXT UNIQUE NOT NULL,
                        descricao TEXT NOT NULL,
                        categoria TEXT,
                        quantidade INTEGER DEFAULT 0,
                        quantidade_minima INTEGER DEFAULT 0,
                        preco_unitario REAL,
                        localizacao TEXT,
                        observacoes TEXT
                    )
                """)
                print("   ‚úÖ Tabela insumos criada")
            
            # Criar tabela obras se n√£o existir
            if 'obras' in tabelas_faltantes:
                cursor.execute("""
                    CREATE TABLE obras (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        codigo TEXT UNIQUE NOT NULL,
                        nome TEXT NOT NULL,
                        descricao TEXT,
                        status TEXT DEFAULT 'Ativa',
                        data_inicio DATE,
                        data_fim DATE,
                        responsavel TEXT,
                        observacoes TEXT
                    )
                """)
                print("   ‚úÖ Tabela obras criada")
            
            # Criar tabela movimentacoes se n√£o existir
            if 'movimentacoes' in tabelas_faltantes:
                cursor.execute("""
                    CREATE TABLE movimentacoes (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        tipo TEXT NOT NULL,
                        item_codigo TEXT NOT NULL,
                        item_descricao TEXT,
                        origem TEXT,
                        destino TEXT,
                        quantidade INTEGER DEFAULT 1,
                        responsavel TEXT,
                        data DATETIME DEFAULT CURRENT_TIMESTAMP,
                        observacoes TEXT
                    )
                """)
                print("   ‚úÖ Tabela movimentacoes criada")
            
            conn.commit()
            print("\n‚úÖ ESTRUTURA DO BANCO CORRIGIDA!")
        else:
            print("\n‚úÖ TODAS AS TABELAS EST√ÉO PRESENTES!")
        
        # Inserir dados de exemplo se as tabelas est√£o vazias
        print("\nüìä VERIFICANDO DADOS DE EXEMPLO...")
        
        # Verificar se h√° equipamentos el√©tricos
        cursor.execute("SELECT COUNT(*) FROM equipamentos_eletricos")
        count_eletricos = cursor.fetchone()[0]
        
        if count_eletricos == 0:
            print("   üì¶ Inserindo equipamentos el√©tricos de exemplo...")
            equipamentos_exemplo = [
                ('ELE-001', 'Furadeira Makita', 'Furadeira', 'Dispon√≠vel', 'Almoxarifado', 'Makita', 'DHP484', 450.00),
                ('ELE-002', 'Serra Circular Bosch', 'Serra', 'Em uso', 'Obra A', 'Bosch', 'GKS 190', 320.00),
                ('ELE-003', 'Parafusadeira Dewalt', 'Parafusadeira', 'Dispon√≠vel', 'Almoxarifado', 'Dewalt', 'DCD771', 280.00),
            ]
            
            for equip in equipamentos_exemplo:
                cursor.execute("""
                    INSERT INTO equipamentos_eletricos 
                    (codigo, nome, categoria, status, localizacao, marca, modelo, valor_compra)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, equip)
            
            print(f"   ‚úÖ {len(equipamentos_exemplo)} equipamentos el√©tricos inseridos")
        
        # Verificar se h√° equipamentos manuais
        cursor.execute("SELECT COUNT(*) FROM equipamentos_manuais")
        count_manuais = cursor.fetchone()[0]
        
        if count_manuais == 0:
            print("   üîß Inserindo equipamentos manuais de exemplo...")
            manuais_exemplo = [
                ('MAN-001', 'Chave de Fenda 1/4', 'Ferramenta Manual', 'Dispon√≠vel', 'Almoxarifado', 5, 'Novo', 'Tramontina', 15.00),
                ('MAN-002', 'Martelo 500g', 'Ferramenta Manual', 'Em Uso', 'Obra B', 2, 'Usado - Bom Estado', 'Stanley', 35.00),
                ('MAN-003', 'Chave Inglesa 12', 'Ferramenta Manual', 'Dispon√≠vel', 'Almoxarifado', 3, 'Novo', 'Gedore', 85.00),
            ]
            
            for equip in manuais_exemplo:
                cursor.execute("""
                    INSERT INTO equipamentos_manuais 
                    (codigo, descricao, tipo, status, localizacao, quantitativo, estado, marca, valor)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, equip)
            
            print(f"   ‚úÖ {len(manuais_exemplo)} equipamentos manuais inseridos")
        
        # Verificar se h√° insumos
        cursor.execute("SELECT COUNT(*) FROM insumos")
        count_insumos = cursor.fetchone()[0]
        
        if count_insumos == 0:
            print("   üì¶ Inserindo insumos de exemplo...")
            insumos_exemplo = [
                ('INS-001', 'Parafuso Phillips 3x20mm', 'Fixa√ß√£o', 500, 100, 0.05, 'Almoxarifado'),
                ('INS-002', 'Tinta L√°tex Branca 18L', 'Tintas', 5, 2, 85.00, 'Almoxarifado'),
                ('INS-003', 'Cimento CP-II 50kg', 'Materiais', 20, 5, 28.50, 'Dep√≥sito'),
            ]
            
            for insumo in insumos_exemplo:
                cursor.execute("""
                    INSERT INTO insumos 
                    (codigo, descricao, categoria, quantidade, quantidade_minima, preco_unitario, localizacao)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, insumo)
            
            print(f"   ‚úÖ {len(insumos_exemplo)} insumos inseridos")
        
        # Verificar se h√° obras
        cursor.execute("SELECT COUNT(*) FROM obras")
        count_obras = cursor.fetchone()[0]
        
        if count_obras == 0:
            print("   üèóÔ∏è Inserindo obras de exemplo...")
            obras_exemplo = [
                ('OBR-001', 'Reforma Escrit√≥rio Central', 'Reforma completa do escrit√≥rio', 'Ativa', '2025-01-15', None, 'Jo√£o Silva'),
                ('OBR-002', 'Constru√ß√£o Galp√£o B', 'Novo galp√£o industrial', 'Ativa', '2025-02-01', None, 'Maria Santos'),
            ]
            
            for obra in obras_exemplo:
                cursor.execute("""
                    INSERT INTO obras 
                    (codigo, nome, descricao, status, data_inicio, data_fim, responsavel)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, obra)
            
            print(f"   ‚úÖ {len(obras_exemplo)} obras inseridas")
        
        conn.commit()
        conn.close()
        
        print("\nüéâ BANCO DE DADOS CONFIGURADO COM SUCESSO!")
        print("\nüìä RESUMO:")
        print(f"   üì± Equipamentos El√©tricos: {count_eletricos if count_eletricos > 0 else len(equipamentos_exemplo) if count_eletricos == 0 else 0}")
        print(f"   üîß Equipamentos Manuais: {count_manuais if count_manuais > 0 else len(manuais_exemplo) if count_manuais == 0 else 0}")
        print(f"   üì¶ Insumos: {count_insumos if count_insumos > 0 else len(insumos_exemplo) if count_insumos == 0 else 0}")
        print(f"   üèóÔ∏è Obras: {count_obras if count_obras > 0 else len(obras_exemplo) if count_obras == 0 else 0}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar banco: {e}")
        if 'conn' in locals():
            conn.close()
        return False

if __name__ == "__main__":
    verificar_e_corrigir_banco()