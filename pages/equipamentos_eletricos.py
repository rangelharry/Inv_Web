#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Invent√°rio Web - Equipamentos El√©tricos
P√°gina para gest√£o completa de equipamentos el√©tricos
"""

from typing import Optional, Dict, Any, List
import pandas as pd

import streamlit as st
import pandas as pd
from datetime import datetime
import sys
import os

# Adicionar pasta raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from database.connection import DatabaseConnection
from utils.auth import get_auth, check_authentication

# Verificar autentica√ß√£o quando acessado diretamente
if not check_authentication():
    st.stop()

def get_equipamentos_data():
    """Carregar dados dos equipamentos el√©tricos"""
    db = DatabaseConnection()
    
    try:
        query = """
            SELECT 
                codigo, nome, categoria, status,
                localizacao, observacoes, marca, modelo, valor_compra
            FROM equipamentos_eletricos
            ORDER BY codigo
        """
        
        result = db.execute_query(query)
        return pd.DataFrame(result) if result else pd.DataFrame()
        
    except Exception as e:
        st.error(f"Erro ao carregar equipamentos: {e}")
        return pd.DataFrame()

def get_locations():
    """Obter lista de localiza√ß√µes dispon√≠veis"""
    # Importar locais da obra/departamento
    from pages.obras import LOCAIS_SUGERIDOS
    locais_simplificados = [local.split(' - ')[1] if ' - ' in local else local for local in LOCAIS_SUGERIDOS]
    return locais_simplificados

def get_categories():
    """Obter categorias de equipamentos"""
    return [
        "Furadeira", "Serra", "Parafusadeira", "Esmerilhadeira", "Soldadora",
        "Compressor", "Gerador", "Medi√ß√£o", "Ilumina√ß√£o", "Outros"
    ]

def show_equipment_filters():
    """Exibir filtros para equipamentos"""
    col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
    
    with col1:
        search_term = st.text_input(
            "üîç Buscar equipamento:",
            placeholder="Digite c√≥digo, descri√ß√£o, marca ou modelo...",
            help="Busca em c√≥digo, descri√ß√£o, marca e modelo"
        )
    
    with col2:
        status_filter = st.selectbox(
            "Status:",
            ["Todos", "Dispon√≠vel", "Em uso", "Em manuten√ß√£o", "Inativo"]
        )
    
    with col3:
        category_filter = st.selectbox(
            "Categoria:",
            ["Todas"] + get_categories()
        )
    
    with col4:
        location_filter = st.selectbox(
            "Localiza√ß√£o:",
            ["Todas"] + get_locations()
        )
    
    return search_term, status_filter, category_filter, location_filter

def apply_filters(df: pd.DataFrame, search_term: str, status_filter: str, category_filter: str, location_filter: str) -> pd.DataFrame:
    """Aplicar filtros ao DataFrame"""
    if df.empty:
        return df
    
    # Filtro de busca
    if search_term:
        mask = (
            df['codigo'].str.contains(search_term, case=False, na=False) |
            df['nome'].str.contains(search_term, case=False, na=False)
        )
        df = df[mask]
    
    # Filtro de status
    if status_filter != "Todos":
        df = df[df['status'] == status_filter]
    
    # Filtro de categoria
    if category_filter != "Todas":
        df = df[df['categoria'] == category_filter]
    
    # Filtro de localiza√ß√£o
    if location_filter != "Todas":
        df = df[df['localizacao'] == location_filter]
    
    return df

def show_equipment_form(equipment_data: Optional[Dict[str, Any]] = None, edit_mode: bool = False) -> None:
    """Exibir formul√°rio para adicionar/editar equipamento"""
    
    form_title = "‚úèÔ∏è Editar Equipamento" if edit_mode else "‚ûï Novo Equipamento"
    
    # Container para o formul√°rio com melhor design
    with st.container():
        st.markdown(f"### {form_title}")
        
        # Exibir informa√ß√µes do equipamento sendo editado
        if edit_mode and equipment_data:
            st.info(f"üîß **Editando equipamento:** {equipment_data.get('codigo', 'N/A')} - {equipment_data.get('nome', 'N/A')}")
        
        with st.form("equipment_form", clear_on_submit=not edit_mode, border=True):
            
            # Se√ß√£o 1: Identifica√ß√£o
            st.markdown("#### üìù Informa√ß√µes B√°sicas")
            col1, col2 = st.columns(2)
            
            with col1:
                codigo = st.text_input(
                    "C√≥digo *",
                    value=equipment_data.get('codigo', '') if equipment_data else '',
                    help="C√≥digo √∫nico do equipamento (n√£o pode ser alterado ap√≥s cria√ß√£o)",
                    disabled=edit_mode,  # N√£o permitir editar c√≥digo
                    placeholder="Ex: ELT001, FUR002, etc."
                )
                
                nome = st.text_area(
                    "Nome/Descri√ß√£o *",
                    value=equipment_data.get('nome', '') if equipment_data else '',
                    height=100,
                    help="Nome/Descri√ß√£o detalhada do equipamento",
                    placeholder="Descreva o equipamento de forma clara e objetiva"
                )
            
            with col2:
                categoria = st.selectbox(
                    "Categoria *",
                    get_categories(),
                    index=get_categories().index(equipment_data.get('categoria', 'Outros')) if equipment_data and equipment_data.get('categoria') in get_categories() else 0,
                    help="Categoria do equipamento para melhor organiza√ß√£o"
                )
                
                status = st.selectbox(
                    "Status *",
                    ["Dispon√≠vel", "Em uso", "Em manuten√ß√£o", "Inativo"],
                    index=["Dispon√≠vel", "Em uso", "Em manuten√ß√£o", "Inativo"].index(equipment_data.get('status', 'Dispon√≠vel')) if equipment_data else 0,
                    help="Status atual do equipamento"
                )
            
            # Se√ß√£o 2: Localiza√ß√£o e Observa√ß√µes
            st.markdown("#### üìç Localiza√ß√£o e Detalhes")
            col3, col4 = st.columns([1, 2])
            
            with col3:
                localizacao = st.selectbox(
                    "Localiza√ß√£o *",
                    get_locations(),
                    index=get_locations().index(equipment_data.get('localizacao', 'N√£o Definido')) if equipment_data and equipment_data.get('localizacao') in get_locations() else len(get_locations())-1,
                    help="Local onde o equipamento est√° armazenado"
                )
            
            with col4:
                observacoes = st.text_area(
                    "Observa√ß√µes",
                    value=equipment_data.get('observacoes', '') if equipment_data else '',
                    height=80,
                    help="Informa√ß√µes adicionais, condi√ß√µes, restri√ß√µes, etc.",
                    placeholder="Observa√ß√µes importantes sobre o equipamento..."
                )
        
            # Bot√µes do formul√°rio
            st.markdown("---")
            col_save, col_cancel = st.columns(2)
            
            with col_save:
                submit_button = st.form_submit_button(
                    "üíæ Salvar Altera√ß√µes" if edit_mode else "‚ûï Adicionar Equipamento",
                    type="primary",
                    use_container_width=True
                )
            
            with col_cancel:
                cancel_button = st.form_submit_button(
                    "‚ùå Cancelar",
                    use_container_width=True
                )
            
            # Processar a√ß√µes dos bot√µes
            if cancel_button:
                st.session_state.show_add_form = False
                st.session_state.edit_equipment = None
                st.rerun()
            
            if submit_button:
                # Valida√ß√µes detalhadas
                errors = []
                
                if not codigo or not codigo.strip():
                    errors.append("C√≥digo √© obrigat√≥rio")
                elif len(codigo.strip()) < 3:
                    errors.append("C√≥digo deve ter pelo menos 3 caracteres")
                
                if not nome or not nome.strip():
                    errors.append("Nome/Descri√ß√£o √© obrigat√≥rio")
                elif len(nome.strip()) < 5:
                    errors.append("Nome/Descri√ß√£o deve ter pelo menos 5 caracteres")
                
                if not categoria or categoria == "":
                    errors.append("Categoria √© obrigat√≥ria")
                
                if not status or status == "":
                    errors.append("Status √© obrigat√≥rio")
                
                if not localizacao or localizacao == "":
                    errors.append("Localiza√ß√£o √© obrigat√≥ria")
                
                # Verificar se c√≥digo j√° existe (apenas para novos equipamentos)
                if not edit_mode and codigo and codigo.strip():
                    existing_equipment = get_equipment_by_code(codigo.strip())
                    if existing_equipment:
                        errors.append(f"J√° existe um equipamento com o c√≥digo '{codigo.strip()}'")
                
                # Exibir erros se houver
                if errors:
                    st.error("‚ùå **Corrija os seguintes erros:**")
                    for error in errors:
                        st.error(f"‚Ä¢ {error}")
                    return
                
                # Preparar dados validados
                equipment_data_to_save = {
                    'codigo': codigo.strip(),
                    'nome': nome.strip(),
                    'categoria': categoria,
                    'status': status,
                    'localizacao': localizacao,
                    'observacoes': observacoes.strip() if observacoes else ''
                }
                
                # Salvar no banco
                try:
                    if edit_mode and equipment_data:
                        success = update_equipment(equipment_data['codigo'], equipment_data_to_save)
                        if success:
                            st.success("‚úÖ **Equipamento atualizado com sucesso!**")
                            st.balloons()
                            st.session_state.edit_equipment = None
                            st.rerun()
                        else:
                            st.error("‚ùå **Erro ao atualizar equipamento!** Tente novamente.")
                    else:
                        success = add_equipment(equipment_data_to_save)
                        if success:
                            st.success("‚úÖ **Equipamento adicionado com sucesso!**")
                            st.balloons()
                            st.session_state.show_add_form = False
                            st.rerun()
                        else:
                            st.error("‚ùå **Erro ao adicionar equipamento!** Verifique se o c√≥digo n√£o est√° duplicado.")
                except Exception as e:
                    st.error(f"‚ùå **Erro inesperado:** {str(e)}")
                    st.error("Por favor, tente novamente ou contate o administrador.")

def get_equipment_by_code(codigo: str) -> Optional[Dict[str, Any]]:
    """Buscar equipamento por c√≥digo"""
    db = DatabaseConnection()
    
    try:
        query = "SELECT * FROM equipamentos_eletricos WHERE codigo = ?"
        result = db.execute_query(query, (codigo,))
        
        if result and len(result) > 0:
            columns = ['id', 'codigo', 'nome', 'categoria', 'status', 'localizacao', 'observacoes', 'created_at', 'updated_at']
            return dict(zip(columns, result[0]))
        return None
    except Exception as e:
        st.error(f"Erro ao buscar equipamento: {e}")
        return None
    finally:
        db.close()

def add_equipment(equipment_data: Dict[str, Any]) -> bool:
    """Adicionar novo equipamento com logging"""
    db = DatabaseConnection()
    
    try:
        query = """
            INSERT INTO equipamentos_eletricos (
                codigo, nome, categoria, status,
                localizacao, observacoes
            ) VALUES (?, ?, ?, ?, ?, ?)
        """
        
        params = (
            equipment_data['codigo'],
            equipment_data['nome'],
            equipment_data['categoria'],
            equipment_data['status'],
            equipment_data['localizacao'],
            equipment_data['observacoes']
        )
        
        success = db.execute_update(query, params)
        
        if success:
            # Log da opera√ß√£o
            from utils.logging import log_crud
            log_crud(
                'create', 
                'equipamentos_eletricos', 
                equipment_data['codigo'],
                f"Equipamento el√©trico criado: {equipment_data['nome']}",
                new_data=equipment_data
            )
        
        return success
        
    except Exception as e:
        st.error(f"Erro ao adicionar equipamento: {e}")
        return False

def update_equipment(equipment_id: str, equipment_data: Dict[str, Any]) -> bool:
    """Atualizar equipamento existente com logging"""
    db = DatabaseConnection()
    
    try:
        # Buscar dados antigos para log
        old_data_query = "SELECT * FROM equipamentos_eletricos WHERE codigo = ?"
        old_result = db.execute_query(old_data_query, (equipment_id,))
        old_data = old_result[0] if old_result else None
        
        query = """
            UPDATE equipamentos_eletricos SET
                nome = ?, categoria = ?, status = ?,
                localizacao = ?, observacoes = ?
            WHERE codigo = ?
        """
        
        params = (
            equipment_data['nome'],
            equipment_data['categoria'],
            equipment_data['status'],
            equipment_data['localizacao'],
            equipment_data['observacoes'],
            equipment_id
        )
        
        success = db.execute_update(query, params)
        
        if success and old_data:
            # Log da opera√ß√£o
            from utils.logging import log_crud
            log_crud(
                'update', 
                'equipamentos_eletricos', 
                equipment_id,
                f"Equipamento el√©trico atualizado: {equipment_data['nome']}",
                old_data=dict(old_data),
                new_data=equipment_data
            )
        
        return success
        
    except Exception as e:
        st.error(f"Erro ao atualizar equipamento: {e}")
        return False

def delete_equipment(equipment_id: str) -> bool:
    """Deletar equipamento com logging"""
    db = DatabaseConnection()
    
    try:
        # Buscar dados antes de deletar para log
        old_data_query = "SELECT * FROM equipamentos_eletricos WHERE codigo = ?"
        old_result = db.execute_query(old_data_query, (equipment_id,))
        old_data = old_result[0] if old_result else None
        
        success = db.execute_update("DELETE FROM equipamentos_eletricos WHERE codigo = ?", (equipment_id,))
        
        if success and old_data:
            # Log da opera√ß√£o
            from utils.logging import log_crud
            log_crud(
                'delete', 
                'equipamentos_eletricos', 
                equipment_id,
                f"Equipamento el√©trico exclu√≠do: {old_data.get('nome', 'N/A')}",
                old_data=dict(old_data)
            )
        
        return success
        
    except Exception as e:
        st.error(f"Erro ao deletar equipamento: {e}")
        return False

def show_equipment_table(df: pd.DataFrame) -> None:
    """Exibir tabela de equipamentos"""
    if df.empty:
        st.info("üì≠ Nenhum equipamento encontrado com os filtros aplicados")
        return
    
    # Configurar colunas para exibi√ß√£o
    df_display = df.copy()
    
    # Formatar dados para melhor visualiza√ß√£o
    df_display['C√≥digo'] = df['codigo']
    df_display['Descri√ß√£o'] = df['nome'].str[:50] + '...' if len(df) > 0 and len(df['nome'].iloc[0]) > 50 else df['nome']
    df_display['Categoria'] = df['categoria']
    df_display['Status'] = df['status']
    df_display['Localiza√ß√£o'] = df['localizacao']
    
    # Colunas a exibir
    columns_to_show = ['C√≥digo', 'Descri√ß√£o', 'Categoria', 'Status', 'Localiza√ß√£o']
    
    # Criar colunas para tabela e a√ß√µes
    col_table, col_actions = st.columns([4, 1])
    
    with col_table:
        # Exibir tabela usando HTML para evitar depend√™ncia do pyarrow
        if not df_display.empty:
            st.markdown("**Equipamentos Cadastrados:**")
            
            for idx, row in df_display.iterrows():
                with st.container():
                    col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
                    
                    with col1:
                        st.markdown(f"**{row['C√≥digo']}** - {row['Descri√ß√£o'][:30]}...")
                        st.caption(f"üìç {row['Localiza√ß√£o']}")
                    
                    with col2:
                        status_color = {"Dispon√≠vel": "üü¢", "Em Uso": "ÔøΩ", "Manuten√ß√£o": "ÔøΩ", "Inativo": "‚ö´"}.get(row['Status'], "‚ö™")
                        st.markdown(f"{status_color} **{row['Status']}**")
                        st.caption(f"ÔøΩ {row['Categoria']}")
                    
                    with col3:
                        st.caption(f" {row.get('data_entrada', 'N/A')}")
                    
                    with col4:
                        # Bot√£o de movimenta√ß√£o r√°pida
                        if st.button("üîÑ", key=f"move_btn_{row['C√≥digo']}", help="Movimenta√ß√£o R√°pida"):
                            st.session_state[f'show_move_{row["C√≥digo"]}'] = True
                            st.rerun()
                    
                    # Formul√°rio de movimenta√ß√£o r√°pida
                    if st.session_state.get(f'show_move_{row["C√≥digo"]}', False):
                        with st.form(f"move_form_{row['C√≥digo']}"):
                            st.markdown(f"#### üîÑ Movimentar: {row['C√≥digo']}")
                            
                            col_origem, col_destino, col_qtd = st.columns(3)
                            
                            with col_origem:
                                st.text_input("Origem", value=row['Localiza√ß√£o'], disabled=True)
                            
                            with col_destino:
                                # Importar locais da obra/departamento
                                from pages.obras import LOCAIS_SUGERIDOS
                                locais_simplificados = [local.split(' - ')[1] if ' - ' in local else local for local in LOCAIS_SUGERIDOS]
                                destino = st.selectbox("Novo Destino", locais_simplificados)
                            
                            with col_qtd:
                                quantidade = st.number_input("Quantidade", min_value=1, value=1, help="Quantidade a movimentar")
                            
                            responsavel = st.text_input("Respons√°vel", help="Nome do respons√°vel pela movimenta√ß√£o")
                            
                            col_submit, col_cancel = st.columns(2)
                            
                            with col_submit:
                                submitted = st.form_submit_button("‚úÖ Confirmar", type="primary")
                            
                            with col_cancel:
                                cancelled = st.form_submit_button("‚ùå Cancelar")
                            
                            if submitted and responsavel:
                                # Registrar movimenta√ß√£o
                                from pages.movimentacoes import registrar_movimentacao
                                success = registrar_movimentacao(
                                    row['C√≥digo'], 
                                    row['Localiza√ß√£o'], 
                                    destino, 
                                    quantidade, 
                                    responsavel
                                )
                                if success:
                                    st.success(f"‚úÖ Movimenta√ß√£o de {quantidade}x {row['C√≥digo']} registrada!")
                                    del st.session_state[f'show_move_{row["C√≥digo"]}']
                                    st.rerun()
                                else:
                                    st.error("‚ùå Erro ao registrar movimenta√ß√£o!")
                            
                            elif submitted and not responsavel:
                                st.error("‚ùå Informe o respons√°vel!")
                            
                            if cancelled:
                                del st.session_state[f'show_move_{row["C√≥digo"]}']
                                st.rerun()
                    
                    st.markdown("---")
        else:
            st.info("Nenhum equipamento encontrado.")
    
    with col_actions:
        st.markdown("#### A√ß√µes")
        
        # Seletor de equipamento para a√ß√µes
        if not df.empty:
            selected_equipment = st.selectbox(
                "Selecionar:",
                options=range(len(df)),
                format_func=lambda x: f"{df.iloc[x]['codigo']} - {df.iloc[x]['nome'][:20]}...",
                key="equipment_selector"
            )
            
            equipment_data = df.iloc[selected_equipment].to_dict()
            
            # Obter autentica√ß√£o para verificar permiss√µes
            auth = get_auth()
            
            # Bot√µes de a√ß√£o - Layout vertical melhorado
            st.markdown("##### üõ†Ô∏è A√ß√µes do Equipamento")
            
            # Bot√µes baseados em permiss√µes
            if auth.has_permission('usuario'):
                if st.button("‚úèÔ∏è Editar Equipamento", use_container_width=True, type="primary"):
                    st.session_state.edit_equipment = equipment_data
                    st.rerun()
            else:
                st.button("‚úèÔ∏è Editar Equipamento", use_container_width=True, disabled=True,
                         help="Permiss√£o insuficiente (necess√°rio: usu√°rio)")
            
            if auth.has_permission('visualizador'):
                if st.button("üîÑ Movimentar Equipamento", use_container_width=True):
                    st.session_state.move_equipment = equipment_data
                    st.rerun()
            else:
                st.button("üîÑ Movimentar Equipamento", use_container_width=True, disabled=True,
                         help="Permiss√£o insuficiente (necess√°rio: visualizador)")
            
            if auth.has_permission('admin'):
                if st.button("üóëÔ∏è Excluir Equipamento", use_container_width=True, type="secondary"):
                    if st.session_state.get('confirm_delete') != equipment_data['codigo']:
                        st.session_state.confirm_delete = equipment_data['codigo']
                        st.warning("‚ö†Ô∏è Clique novamente para confirmar exclus√£o")
                    else:
                        if delete_equipment(equipment_data['codigo']):
                            st.success("‚úÖ Equipamento exclu√≠do com sucesso!")
                            del st.session_state.confirm_delete
                            st.rerun()
                        else:
                            st.error("‚ùå Erro ao excluir equipamento!")
            else:
                st.button("üóëÔ∏è Excluir Equipamento", use_container_width=True, disabled=True,
                         help="Permiss√£o insuficiente (necess√°rio: admin)")

def show():
    """Fun√ß√£o principal da p√°gina Equipamentos El√©tricos"""
    
    # Verificar autentica√ß√£o
    auth = get_auth()
    if not auth.is_authenticated():
        auth.show_login_page()
        return
    
    # Verificar permiss√µes b√°sicas
    if not auth.require_role('visualizador'):
        return
    
    # Header da p√°gina
    st.markdown("## ‚ö° Equipamentos El√©tricos")
    st.markdown("Gest√£o completa de ferramentas e equipamentos el√©tricos")
    
    # Controles superiores
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Filtros
        search_term, status_filter, category_filter, location_filter = show_equipment_filters()
    
    with col2:
        st.markdown("#### A√ß√µes")
        if auth.has_permission('usuario'):
            if st.button("‚ûï Novo Equipamento", use_container_width=True, type="primary"):
                st.session_state.show_add_form = True
                st.rerun()
        else:
            st.button("‚ûï Novo Equipamento", use_container_width=True, disabled=True, 
                     help="Permiss√£o insuficiente (necess√°rio: usu√°rio)")
        
        if st.button("üìä Relat√≥rio", use_container_width=True):
            st.info("Funcionalidade de relat√≥rio ser√° implementada")
    
    st.markdown("---")
    
    # Formul√°rio de novo equipamento
    if st.session_state.get('show_add_form', False):
        show_equipment_form()
        st.markdown("---")
    
    # Formul√°rio de edi√ß√£o
    if st.session_state.get('edit_equipment'):
        show_equipment_form(st.session_state.edit_equipment, edit_mode=True)
        st.markdown("---")
    
    # Carregar e exibir dados
    with st.spinner("‚ö° Carregando equipamentos..."):
        df = get_equipamentos_data()
    
    if not df.empty:
        # Aplicar filtros
        df_filtered = apply_filters(df, search_term, status_filter, category_filter, location_filter)
        
        # Exibir estat√≠sticas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total de Equipamentos", len(df))
        
        with col2:
            disponivel = len(df[df['status'] == 'Dispon√≠vel'])
            st.metric("Dispon√≠veis", disponivel)
        
        with col3:
            em_uso = len(df[df['status'] == 'Em Uso'])
            st.metric("Em Uso", em_uso)
        
        with col4:
            manutencao = len(df[df['status'] == 'Manuten√ß√£o'])
            st.metric("Em Manuten√ß√£o", manutencao, delta_color="inverse")
        
        st.markdown("---")
        
        # Exibir tabela
        st.markdown(f"### üìã Lista de Equipamentos ({len(df_filtered)} encontrados)")
        show_equipment_table(df_filtered)
        
    else:
        st.warning("‚ö†Ô∏è Nenhum equipamento encontrado no banco de dados")
        st.info("Use o bot√£o 'Novo Equipamento' para adicionar o primeiro equipamento")
    
    # Informa√ß√µes sobre funcionalidades
    st.markdown("---")
    st.info("""
    üí° **Funcionalidades implementadas:**
    - ‚úÖ Listagem completa de equipamentos el√©tricos
    - ‚úÖ Cadastro de novos equipamentos
    - ‚úÖ Edi√ß√£o e exclus√£o de equipamentos
    - ‚úÖ Filtros avan√ßados (status, categoria, localiza√ß√£o)
    - ‚úÖ Movimenta√ß√£o r√°pida com quantidade
    - ‚úÖ Integra√ß√£o com locais da Obra/Departamento
    - ‚úÖ Sistema de busca por c√≥digo/descri√ß√£o
    - ‚úÖ M√©tricas e estat√≠sticas em tempo real
    """)

if __name__ == "__main__":
    from pages import equipamentos_eletricos
    equipamentos_eletricos.show()