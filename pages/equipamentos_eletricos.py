#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Invent√°rio Web - Equipamentos El√©tricos
P√°gina para gest√£o completa de equipamentos el√©tricos
"""

from typing import Optional, Dict, Any, List
import pandas as pd

import streamlit as st
import pandas as pd
from datetime import datetime
import sys
import os

# Adicionar pasta raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from database.connection import DatabaseConnection
from utils.auth import get_auth, check_authentication

# Verificar autentica√ß√£o quando acessado diretamente
if not check_authentication():
    st.stop()

def get_equipamentos_data():
    """Carregar dados dos equipamentos el√©tricos"""
    db = DatabaseConnection()
    
    try:
        query = """
            SELECT 
                codigo, nome, categoria, status,
                localizacao, observacoes, marca, modelo, valor_compra
            FROM equipamentos_eletricos
            ORDER BY codigo
        """
        
        result = db.execute_query(query)
        return pd.DataFrame(result) if result else pd.DataFrame()
        
    except Exception as e:
        st.error(f"Erro ao carregar equipamentos: {e}")
        return pd.DataFrame()

def get_locations():
    """Obter lista de localiza√ß√µes dispon√≠veis"""
    # Importar locais da obra/departamento
    from pages.obras import LOCAIS_SUGERIDOS
    locais_simplificados = [local.split(' - ')[1] if ' - ' in local else local for local in LOCAIS_SUGERIDOS]
    return locais_simplificados

def get_categories():
    """Obter categorias de equipamentos"""
    return [
        "Furadeira", "Serra", "Parafusadeira", "Esmerilhadeira", "Soldadora",
        "Compressor", "Gerador", "Medi√ß√£o", "Ilumina√ß√£o", "Outros"
    ]

def show_equipment_filters():
    """Exibir filtros para equipamentos"""
    col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
    
    with col1:
        search_term = st.text_input(
            "üîç Buscar equipamento:",
            placeholder="Digite c√≥digo, descri√ß√£o, marca ou modelo...",
            help="Busca em c√≥digo, descri√ß√£o, marca e modelo"
        )
    
    with col2:
        status_filter = st.selectbox(
            "Status:",
            ["Todos", "Dispon√≠vel", "Em uso", "Em manuten√ß√£o", "Inativo"]
        )
    
    with col3:
        category_filter = st.selectbox(
            "Categoria:",
            ["Todas"] + get_categories()
        )
    
    with col4:
        location_filter = st.selectbox(
            "Localiza√ß√£o:",
            ["Todas"] + get_locations()
        )
    
    return search_term, status_filter, category_filter, location_filter

def apply_filters(df: pd.DataFrame, search_term: str, status_filter: str, category_filter: str, location_filter: str) -> pd.DataFrame:
    """Aplicar filtros ao DataFrame"""
    if df.empty:
        return df
    
    # Filtro de busca
    if search_term:
        mask = (
            df['codigo'].str.contains(search_term, case=False, na=False) |
            df['nome'].str.contains(search_term, case=False, na=False)
        )
        df = df[mask]
    
    # Filtro de status
    if status_filter != "Todos":
        df = df[df['status'] == status_filter]
    
    # Filtro de categoria
    if category_filter != "Todas":
        df = df[df['categoria'] == category_filter]
    
    # Filtro de localiza√ß√£o
    if location_filter != "Todas":
        df = df[df['localizacao'] == location_filter]
    
    return df

def show_equipment_form(equipment_data: Optional[Dict[str, Any]] = None, edit_mode: bool = False) -> None:
    """Exibir formul√°rio para adicionar/editar equipamento"""
    
    form_title = "‚úèÔ∏è Editar Equipamento" if edit_mode else "‚ûï Novo Equipamento"
    
    # Container para o formul√°rio com melhor design
    with st.container():
        st.markdown(f"### {form_title}")
        
        # Exibir informa√ß√µes do equipamento sendo editado
        if edit_mode and equipment_data:
            st.info(f"üîß **Editando equipamento:** {equipment_data.get('codigo', 'N/A')} - {equipment_data.get('nome', 'N/A')}")
        
        with st.form("equipment_form", clear_on_submit=not edit_mode, border=True):
            
            # Se√ß√£o 1: Identifica√ß√£o
            st.markdown("#### üìù Informa√ß√µes B√°sicas")
            col1, col2 = st.columns(2)
            
            with col1:
                codigo = st.text_input(
                    "C√≥digo *",
                    value=equipment_data.get('codigo', '') if equipment_data else '',
                    help="C√≥digo √∫nico do equipamento (n√£o pode ser alterado ap√≥s cria√ß√£o)",
                    disabled=edit_mode,  # N√£o permitir editar c√≥digo
                    placeholder="Ex: ELT001, FUR002, etc."
                )
                
                nome = st.text_area(
                    "Nome/Descri√ß√£o *",
                    value=equipment_data.get('nome', '') if equipment_data else '',
                    height=100,
                    help="Nome/Descri√ß√£o detalhada do equipamento",
                    placeholder="Descreva o equipamento de forma clara e objetiva"
                )
            
            with col2:
                categoria = st.selectbox(
                    "Categoria *",
                    get_categories(),
                    index=get_categories().index(equipment_data.get('categoria', 'Outros')) if equipment_data and equipment_data.get('categoria') in get_categories() else 0,
                    help="Categoria do equipamento para melhor organiza√ß√£o"
                )
                
                status = st.selectbox(
                    "Status *",
                    ["Dispon√≠vel", "Em uso", "Em manuten√ß√£o", "Inativo"],
                    index=["Dispon√≠vel", "Em uso", "Em manuten√ß√£o", "Inativo"].index(equipment_data.get('status', 'Dispon√≠vel')) if equipment_data else 0,
                    help="Status atual do equipamento"
                )
            
            # Se√ß√£o 2: Localiza√ß√£o e Observa√ß√µes
            st.markdown("#### üìç Localiza√ß√£o e Detalhes")
            col3, col4 = st.columns([1, 2])
            
            with col3:
                localizacao = st.selectbox(
                    "Localiza√ß√£o *",
                    get_locations(),
                    index=get_locations().index(equipment_data.get('localizacao', 'N√£o Definido')) if equipment_data and equipment_data.get('localizacao') in get_locations() else len(get_locations())-1,
                    help="Local onde o equipamento est√° armazenado"
                )
            
            with col4:
                observacoes = st.text_area(
                    "Observa√ß√µes",
                    value=equipment_data.get('observacoes', '') if equipment_data else '',
                    height=80,
                    help="Informa√ß√µes adicionais, condi√ß√µes, restri√ß√µes, etc.",
                    placeholder="Observa√ß√µes importantes sobre o equipamento..."
                )
        
            # Bot√µes do formul√°rio
            st.markdown("---")
            col_save, col_cancel = st.columns(2)
            
            with col_save:
                submit_button = st.form_submit_button(
                    "üíæ Salvar Altera√ß√µes" if edit_mode else "‚ûï Adicionar Equipamento",
                    type="primary",
                    use_container_width=True
                )
            
            with col_cancel:
                cancel_button = st.form_submit_button(
                    "‚ùå Cancelar",
                    use_container_width=True
                )
            
            # Processar a√ß√µes dos bot√µes
            if cancel_button:
                st.session_state.show_add_form = False
                st.session_state.edit_equipment = None
                st.rerun()
            
            if submit_button:
                # Valida√ß√µes detalhadas
                errors = []
                
                if not codigo or not codigo.strip():
                    errors.append("C√≥digo √© obrigat√≥rio")
                elif len(codigo.strip()) < 3:
                    errors.append("C√≥digo deve ter pelo menos 3 caracteres")
                
                if not nome or not nome.strip():
                    errors.append("Nome/Descri√ß√£o √© obrigat√≥rio")
                elif len(nome.strip()) < 5:
                    errors.append("Nome/Descri√ß√£o deve ter pelo menos 5 caracteres")
                
                if not categoria or categoria == "":
                    errors.append("Categoria √© obrigat√≥ria")
                
                if not status or status == "":
                    errors.append("Status √© obrigat√≥rio")
                
                if not localizacao or localizacao == "":
                    errors.append("Localiza√ß√£o √© obrigat√≥ria")
                
                # Verificar se c√≥digo j√° existe (apenas para novos equipamentos)
                if not edit_mode and codigo and codigo.strip():
                    existing_equipment = get_equipment_by_code(codigo.strip())
                    if existing_equipment:
                        errors.append(f"J√° existe um equipamento com o c√≥digo '{codigo.strip()}'")
                
                # Exibir erros se houver
                if errors:
                    st.error("‚ùå **Corrija os seguintes erros:**")
                    for error in errors:
                        st.error(f"‚Ä¢ {error}")
                    return
                
                # Preparar dados validados
                equipment_data_to_save = {
                    'codigo': codigo.strip(),
                    'nome': nome.strip(),
                    'categoria': categoria,
                    'status': status,
                    'localizacao': localizacao,
                    'observacoes': observacoes.strip() if observacoes else ''
                }
                
                # Salvar no banco
                try:
                    if edit_mode and equipment_data:
                        success = update_equipment(equipment_data['codigo'], equipment_data_to_save)
                        if success:
                            st.success("‚úÖ **Equipamento atualizado com sucesso!**")
                            st.balloons()
                            st.session_state.edit_equipment = None
                            st.rerun()
                        else:
                            st.error("‚ùå **Erro ao atualizar equipamento!** Tente novamente.")
                    else:
                        success = add_equipment(equipment_data_to_save)
                        if success:
                            st.success("‚úÖ **Equipamento adicionado com sucesso!**")
                            st.balloons()
                            st.session_state.show_add_form = False
                            st.rerun()
                        else:
                            st.error("‚ùå **Erro ao adicionar equipamento!** Verifique se o c√≥digo n√£o est√° duplicado.")
                except Exception as e:
                    st.error(f"‚ùå **Erro inesperado:** {str(e)}")
                    st.error("Por favor, tente novamente ou contate o administrador.")

def get_equipment_by_code(codigo: str) -> Optional[Dict[str, Any]]:
    """Buscar equipamento por c√≥digo"""
    db = DatabaseConnection()
    
    try:
        query = "SELECT * FROM equipamentos_eletricos WHERE codigo = ?"
        result = db.execute_query(query, (codigo,))
        
        if result and len(result) > 0:
            columns = ['id', 'codigo', 'nome', 'categoria', 'status', 'localizacao', 'observacoes', 'created_at', 'updated_at']
            return dict(zip(columns, result[0]))
        return None
    except Exception as e:
        st.error(f"Erro ao buscar equipamento: {e}")
        return None
    finally:
        db.close()

def add_equipment(equipment_data: Dict[str, Any]) -> bool:
    """Adicionar novo equipamento com logging"""
    db = DatabaseConnection()
    
    try:
        query = """
            INSERT INTO equipamentos_eletricos (
                codigo, nome, categoria, status,
                localizacao, observacoes
            ) VALUES (?, ?, ?, ?, ?, ?)
        """
        
        params = (
            equipment_data['codigo'],
            equipment_data['nome'],
            equipment_data['categoria'],
            equipment_data['status'],
            equipment_data['localizacao'],
            equipment_data['observacoes']
        )
        
        success = db.execute_update(query, params)
        
        if success:
            # Log da opera√ß√£o
            from utils.logging import log_crud
            log_crud(
                'create', 
                'equipamentos_eletricos', 
                equipment_data['codigo'],
                f"Equipamento el√©trico criado: {equipment_data['nome']}",
                new_data=equipment_data
            )
        
        return success
        
    except Exception as e:
        st.error(f"Erro ao adicionar equipamento: {e}")
        return False

def update_equipment(equipment_id: str, equipment_data: Dict[str, Any]) -> bool:
    """Atualizar equipamento existente com logging"""
    db = DatabaseConnection()
    
    try:
        # Buscar dados antigos para log
        old_data_query = "SELECT * FROM equipamentos_eletricos WHERE codigo = ?"
        old_result = db.execute_query(old_data_query, (equipment_id,))
        old_data = old_result[0] if old_result else None
        
        query = """
            UPDATE equipamentos_eletricos SET
                nome = ?, categoria = ?, status = ?,
                localizacao = ?, observacoes = ?
            WHERE codigo = ?
        """
        
        params = (
            equipment_data['nome'],
            equipment_data['categoria'],
            equipment_data['status'],
            equipment_data['localizacao'],
            equipment_data['observacoes'],
            equipment_id
        )
        
        success = db.execute_update(query, params)
        
        if success and old_data:
            # Log da opera√ß√£o
            from utils.logging import log_crud
            log_crud(
                'update', 
                'equipamentos_eletricos', 
                equipment_id,
                f"Equipamento el√©trico atualizado: {equipment_data['nome']}",
                old_data=dict(old_data),
                new_data=equipment_data
            )
        
        return success
        
    except Exception as e:
        st.error(f"Erro ao atualizar equipamento: {e}")
        return False

def delete_equipment(equipment_id: str) -> bool:
    """Deletar equipamento com logging"""
    db = DatabaseConnection()
    
    try:
        # Buscar dados antes de deletar para log
        old_data_query = "SELECT * FROM equipamentos_eletricos WHERE codigo = ?"
        old_result = db.execute_query(old_data_query, (equipment_id,))
        old_data = old_result[0] if old_result else None
        
        success = db.execute_update("DELETE FROM equipamentos_eletricos WHERE codigo = ?", (equipment_id,))
        
        if success and old_data:
            # Log da opera√ß√£o
            from utils.logging import log_crud
            log_crud(
                'delete', 
                'equipamentos_eletricos', 
                equipment_id,
                f"Equipamento el√©trico exclu√≠do: {old_data.get('nome', 'N/A')}",
                old_data=dict(old_data)
            )
        
        return success
        
    except Exception as e:
        st.error(f"Erro ao deletar equipamento: {e}")
        return False

def show_equipment_table(df: pd.DataFrame) -> None:
    """Exibir tabela de equipamentos el√©tricos com layout igual aos manuais"""
    if df.empty:
        st.warning("Nenhum equipamento el√©trico encontrado")
        return
    
    # Exibir dados com a√ß√µes CRUD (mesmo layout dos equipamentos manuais)
    for idx, row in df.iterrows():
        with st.container():
            col1, col2, col3, col4 = st.columns([3, 2, 2, 2])
            
            with col1:
                st.markdown(f"**{row['codigo']}** - {row['nome']}")
                st.caption(f"üìç {row['localizacao']} | üè∑Ô∏è {row['categoria'] or 'Sem categoria'}")
            
            with col2:
                status_emoji = {"Dispon√≠vel": "üü¢", "Em Uso": "üü°", "Manuten√ß√£o": "üî¥", "Inativo": "‚ö´", "Emprestado": "üîµ"}.get(row['status'], "‚ö™")
                st.markdown(f"{status_emoji} **{row['status']}**")
                if row['marca']:
                    st.caption(f"üè≠ {row['marca']}")
            
            with col3:
                if row['modelo']:
                    st.markdown(f"üìã **{row['modelo']}**")
                if row['valor_compra']:
                    try:
                        valor_float = float(row['valor_compra'])
                        st.caption(f"üí∞ R$ {valor_float:.2f}")
                    except (ValueError, TypeError):
                        st.caption(f"üí∞ R$ {row['valor_compra']}")
            
            with col4:
                col_actions1, col_actions2, col_actions3 = st.columns(3)
                
                with col_actions1:
                    if st.button("‚úèÔ∏è", key=f"edit_{row['codigo']}", help="Editar"):
                        st.session_state.edit_equipamento_eletrico = row['codigo']
                        st.rerun()
                
                with col_actions2:
                    if st.button("üîÑ", key=f"move_{row['codigo']}", help="Movimentar"):
                        st.session_state[f'show_move_{row["codigo"]}'] = True
                        st.rerun()
                
                with col_actions3:
                    if st.button("üóëÔ∏è", key=f"delete_{row['codigo']}", help="Excluir"):
                        st.session_state.confirm_delete = row['codigo']
                        st.rerun()
                    
                    # Formul√°rio de movimenta√ß√£o r√°pida
                    if st.session_state.get(f'show_move_{row["codigo"]}', False):
                        with st.form(f"move_form_{row['codigo']}"):
                            st.markdown(f"#### üîÑ Movimentar: {row['codigo']}")
                            
                            col_origem, col_destino, col_qtd = st.columns(3)
                            
                            with col_origem:
                                st.text_input("Origem", value=row['localizacao'], disabled=True)
                            
                            with col_destino:
                                # Importar locais da obra/departamento
                                from pages.obras import LOCAIS_SUGERIDOS
                                locais_simplificados = [local.split(' - ')[1] if ' - ' in local else local for local in LOCAIS_SUGERIDOS]
                                destino = st.selectbox("Novo Destino", locais_simplificados)
                            
                            with col_qtd:
                                quantidade = st.number_input("Quantidade", min_value=1, value=1, help="Quantidade a movimentar")
                            
                            responsavel = st.text_input("Respons√°vel", help="Nome do respons√°vel pela movimenta√ß√£o")
                            
                            col_submit, col_cancel = st.columns(2)
                            
                            with col_submit:
                                submitted = st.form_submit_button("‚úÖ Confirmar", type="primary")
                            
                            with col_cancel:
                                cancelled = st.form_submit_button("‚ùå Cancelar")
                            
                            if submitted and responsavel:
                                # Registrar movimenta√ß√£o
                                from pages.movimentacoes import registrar_movimentacao
                                success = registrar_movimentacao(
                                    row['codigo'], 
                                    row['localizacao'], 
                                    destino, 
                                    quantidade, 
                                    responsavel
                                )
                                if success:
                                    st.success(f"‚úÖ Movimenta√ß√£o de {quantidade}x {row['codigo']} registrada!")
                                    del st.session_state[f'show_move_{row["codigo"]}']
                                    st.rerun()
                                else:
                                    st.error("‚ùå Erro ao registrar movimenta√ß√£o!")
                            
                            elif submitted and not responsavel:
                                st.error("‚ùå Informe o respons√°vel!")
                            
                            if cancelled:
                                del st.session_state[f'show_move_{row["codigo"]}']
                                st.rerun()
                    
                    st.markdown("---")


def show_metrics_eletricos(df):
    """Exibir m√©tricas dos equipamentos el√©tricos"""
    if df.empty:
        st.warning("üìä N√£o h√° dados para exibir m√©tricas")
        return
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total = len(df)
        st.metric("Total de Equipamentos", total)
    
    with col2:
        disponiveis = len(df[df['status'] == 'Dispon√≠vel'])
        st.metric("Dispon√≠veis", disponiveis, f"‚Üë {(disponiveis/total*100):.1f}%" if total > 0 else "0%")
    
    with col3:
        em_uso = len(df[df['status'] == 'Em uso'])
        st.metric("Em Uso", em_uso, f"{(em_uso/total*100):.1f}%" if total > 0 else "0%")
    
    with col4:
        manutencao = len(df[df['status'] == 'Em manuten√ß√£o'])
        st.metric("Manuten√ß√£o", manutencao, f"{(manutencao/total*100):.1f}%" if total > 0 else "0%")

def show():
    """Fun√ß√£o principal da p√°gina Equipamentos El√©tricos"""
    
    # Verificar autentica√ß√£o
    auth = get_auth()
    if not auth.is_authenticated():
        auth.show_login_page()
        return
    
    user = auth.get_current_user()
    
    st.markdown("## ‚ö° Equipamentos El√©tricos")
    st.markdown("**CRUD Completo** - Gest√£o de ferramentas e equipamentos el√©tricos")
    
    # Tabs para organizar as funcionalidades
    tab_list, tab_create, tab_manage = st.tabs(["üìã Listagem", "‚ûï Cadastrar", "‚öôÔ∏è Gerenciar"])
    
    with tab_list:
        # Carregar dados
        with st.spinner("üìä Carregando equipamentos el√©tricos..."):
            df = get_equipamentos_data()
        
        if not df.empty:
            # M√©tricas
            st.markdown("### üìä Resumo Geral")
            show_metrics_eletricos(df)
            
            st.divider()
            
            # Filtros
            st.markdown("### üîç Filtros")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                status_filter = st.selectbox(
                    "Status:",
                    ["Todos"] + ["Dispon√≠vel", "Em uso", "Em manuten√ß√£o", "Inativo"],
                    key="status_filter_eletricos"
                )
            
            with col2:
                categoria_filter = st.selectbox(
                    "Categoria:",
                    ["Todas"] + get_categories(),
                    key="categoria_filter_eletricos"
                )
            
            with col3:
                search_term = st.text_input(
                    "Buscar:",
                    placeholder="Digite c√≥digo, nome ou marca...",
                    key="search_eletricos"
                )
            
            # Aplicar filtros
            df_filtered = df.copy()
            
            if status_filter != "Todos":
                df_filtered = df_filtered[df_filtered['status'] == status_filter]
            
            if categoria_filter != "Todas":
                df_filtered = df_filtered[df_filtered['categoria'] == categoria_filter]
            
            if search_term:
                mask = (
                    df_filtered['codigo'].str.contains(search_term, case=False, na=False) |
                    df_filtered['nome'].str.contains(search_term, case=False, na=False) |
                    df_filtered['marca'].str.contains(search_term, case=False, na=False)
                )
                df_filtered = df_filtered[mask]
            
            st.divider()
            
            # Tabela de equipamentos
            if not df_filtered.empty:
                st.markdown(f"### üìã Equipamentos El√©tricos ({len(df_filtered)} encontrados)")
                show_equipment_table(df_filtered)
            else:
                st.warning("‚ö†Ô∏è Nenhum equipamento encontrado com os filtros aplicados")
        
        else:
            st.warning("‚ö†Ô∏è Nenhum equipamento el√©trico encontrado no sistema")
            st.info("""
            üí° **Equipamentos el√©tricos n√£o encontrados**
            
            Para ver equipamentos el√©tricos nesta p√°gina:
            - Use a aba "‚ûï Cadastrar" para adicionar novos equipamentos
            - Certifique-se de que voc√™ tem permiss√£o para visualizar estes dados
            """)
    
    with tab_create:
        # Formul√°rio de cria√ß√£o
        show_equipment_form()
    
    with tab_manage:
        # Verificar se h√° equipamento sendo editado
        if 'edit_equipamento_eletrico' in st.session_state:
            # Buscar equipamento no banco
            db = DatabaseConnection()
            equipamento_data = db.execute_query(
                "SELECT * FROM equipamentos_eletricos WHERE codigo = ?",
                (st.session_state['edit_equipamento_eletrico'],)
            )
            
            if equipamento_data:
                equipamento = equipamento_data[0]
                show_equipment_form(equipment_data=equipamento, edit_mode=True)
            else:
                st.error("Equipamento n√£o encontrado!")
                st.session_state.pop('edit_equipamento_eletrico', None)
        else:
            st.info("‚úèÔ∏è **Selecione um equipamento na aba 'Listagem' para editar**")
            
            # Mostrar estat√≠sticas de gest√£o
            df = get_equipamentos_data()
            if not df.empty:
                st.markdown("### üìä Estat√≠sticas de Gest√£o")
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    total = len(df)
                    st.metric("Total", total)
                
                with col2:
                    necessitam_manutencao = len(df[df['status'] == 'Em manuten√ß√£o'])
                    st.metric("Em Manuten√ß√£o", necessitam_manutencao)
                
                with col3:
                    inativos = len(df[df['status'] == 'Inativo'])
                    st.metric("Inativos", inativos)
                
                with col4:
                    sem_valor = len(df[df['valor_compra'].isna() | (df['valor_compra'] == 0)])
                    st.metric("Sem Valor", sem_valor)
                
                # Lista de equipamentos que precisam de aten√ß√£o
                st.markdown("### ‚ö†Ô∏è Equipamentos que Precisam de Aten√ß√£o")
                
                problemas = df[
                    (df['status'] == 'Em manuten√ß√£o') | 
                    (df['status'] == 'Inativo') |
                    (df['valor_compra'].isna()) |
                    (df['valor_compra'] == 0)
                ]
                
                if not problemas.empty:
                    for _, row in problemas.iterrows():
                        alerts = []
                        if row['status'] == 'Em manuten√ß√£o':
                            alerts.append("üîß Em manuten√ß√£o")
                        if row['status'] == 'Inativo':
                            alerts.append("‚ö†Ô∏è Inativo")
                        if pd.isna(row['valor_compra']) or row['valor_compra'] == 0:
                            alerts.append("üí∞ Sem valor definido")
                        
                        st.warning(f"**{row['codigo']}** - {row['nome']}: {' | '.join(alerts)}")
                else:
                    st.success("‚úÖ Todos os equipamentos est√£o em ordem!")



if __name__ == "__main__":
    from pages import equipamentos_eletricos
    equipamentos_eletricos.show()