#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Invent√°rio Web - Obra/Departamento
P√°gina de gest√£o de obras, departamentos e locais
"""

import streamlit as st
import sys
import os
import pandas as pd

# Adicionar pasta raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from database.connection import DatabaseConnection
from utils.auth import get_auth, check_authentication

# Verificar autentica√ß√£o quando acessado diretamente
if not check_authentication():
    st.stop()

# Sugest√µes pr√©-cadastradas de locais/departamentos
LOCAIS_SUGERIDOS = [
    # Obras/Projetos
    "Obra - Residencial Vista Alegre",
    "Obra - Edif√≠cio Comercial Centro",
    "Obra - Shopping Mall Norte",
    "Obra - Condom√≠nio Jardim das Flores",
    "Obra - F√°brica Zona Industrial",
    "Obra - Hospital Regional",
    "Obra - Escola Municipal",
    "Obra - Ponte Rio Verde",
    
    # Departamentos Internos
    "Departamento - Almoxarifado Central",
    "Departamento - Escrit√≥rio Matriz",
    "Departamento - Manuten√ß√£o",
    "Departamento - Engenharia",
    "Departamento - Recursos Humanos",
    "Departamento - Financeiro",
    "Departamento - Compras",
    "Departamento - Qualidade",
    "Departamento - Seguran√ßa do Trabalho",
    "Departamento - TI/Inform√°tica",
    "Departamento - Vendas",
    "Departamento - Marketing",
    
    # Locais Externos
    "Cliente - Empresa ABC Ltda",
    "Cliente - Construtora XYZ",
    "Fornecedor - Materiais S√£o Paulo",
    "Fornecedor - Ferragens do Norte",
    "Terceirizado - Manuten√ß√£o Industrial",
    "Terceirizado - Limpeza e Conserva√ß√£o",
    
    # Locais de Armazenamento
    "Estoque - Galp√£o Principal",
    "Estoque - Dep√≥sito Filial",
    "Estoque - Container Tempor√°rio",
    "Estoque - √Årea Externa",
    "Em Tr√¢nsito - Transportadora",
    "Em Tr√¢nsito - Ve√≠culo Pr√≥prio"
]

def get_obras_data():
    """Carregar dados das obras"""
    db = DatabaseConnection()
    
    try:
        query = """
            SELECT 
                id, nome, descricao, status,
                data_inicio, data_termino, responsavel
            FROM obras
            ORDER BY id
        """
        
        result = db.execute_query(query)
        
        if result:
            return pd.DataFrame(result)
        else:
            return pd.DataFrame()
            
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return pd.DataFrame()

def cadastrar_obra(nome, descricao, status, data_inicio, data_termino, responsavel):
    """Cadastrar nova obra"""
    db = DatabaseConnection()
    
    try:
        query = """
            INSERT INTO obras (
                nome, descricao, status, data_inicio, data_termino, responsavel
            ) VALUES (?, ?, ?, ?, ?, ?)
        """
        
        params = (nome, descricao, status, data_inicio.strftime('%Y-%m-%d'), data_termino.strftime('%Y-%m-%d'), responsavel)
        
        return db.execute_update(query, params)
        
    except Exception as e:
        st.error(f"Erro ao cadastrar obra: {e}")
        return False

def atualizar_obra(obra_id, nome, descricao, status, data_inicio, data_termino, responsavel):
    """Atualizar obra existente"""
    db = DatabaseConnection()
    
    try:
        query = """
            UPDATE obras SET
                nome = ?, descricao = ?, status = ?, 
                data_inicio = ?, data_termino = ?, responsavel = ?
            WHERE id = ?
        """
        
        params = (nome, descricao, status, data_inicio.strftime('%Y-%m-%d'), data_termino.strftime('%Y-%m-%d'), responsavel, obra_id)
        
        return db.execute_update(query, params)
        
    except Exception as e:
        st.error(f"Erro ao atualizar obra: {e}")
        return False

def excluir_obra(obra_id):
    """Excluir obra"""
    db = DatabaseConnection()
    
    try:
        return db.execute_update("DELETE FROM obras WHERE id = ?", (obra_id,))
        
    except Exception as e:
        st.error(f"Erro ao excluir obra: {e}")
        return False

def show():
    """Fun√ß√£o principal da p√°gina Obras"""
    
    # Verificar autentica√ß√£o
    auth = get_auth()
    if not auth.is_authenticated():
        auth.show_login_page()
        return
    
    st.markdown(f"## üèóÔ∏è Obra/Departamento")
    st.markdown("Gest√£o de obras, departamentos e locais para movimenta√ß√µes")
    
    # Se√ß√£o de locais sugeridos
    st.markdown("### üìç Locais/Departamentos Pr√©-Cadastrados")
    st.info("üí° **Sugest√µes de locais para movimenta√ß√µes** - Use estes locais nas movimenta√ß√µes de equipamentos e insumos:")
    
    # Organizar sugest√µes por categoria
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**üèóÔ∏è Obras/Projetos:**")
        obras = [local for local in LOCAIS_SUGERIDOS if local.startswith("Obra -")]
        for obra in obras:
            st.markdown(f"‚Ä¢ {obra.replace('Obra - ', '')}")
    
    with col2:
        st.markdown("**üè¢ Departamentos:**")
        departamentos = [local for local in LOCAIS_SUGERIDOS if local.startswith("Departamento -")]
        for dept in departamentos[:8]:  # Limitar a 8 para n√£o ficar muito longo
            st.markdown(f"‚Ä¢ {dept.replace('Departamento - ', '')}")
    
    with col3:
        st.markdown("**üì¶ Outros Locais:**")
        outros = [local for local in LOCAIS_SUGERIDOS if not local.startswith(("Obra -", "Departamento -"))]
        for outro in outros[:8]:  # Limitar a 8 para n√£o ficar muito longo
            st.markdown(f"‚Ä¢ {outro}")
    
    st.markdown("---")
    
    # Carregar dados
    with st.spinner("üìä Carregando dados de obras/departamentos..."):
        df = get_obras_data()
    
    if df.empty:
        st.warning("‚ö†Ô∏è Nenhuma obra/departamento encontrado no sistema")
        st.info("""
        üí° **Obras/Departamentos n√£o encontrados**
        
        Para visualizar obras/departamentos nesta p√°gina:
        - Cadastre novos locais usando o formul√°rio abaixo
        - Use as sugest√µes pr√©-cadastradas acima como refer√™ncia
        - Certifique-se de que a tabela 'obras' existe no banco de dados
        """)
    else:
        # M√©tricas b√°sicas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total de Locais", len(df))
        
        with col2:
            ativas = len(df[df['status'] == 'ativa']) if 'status' in df.columns else 0
            st.metric("Locais Ativos", ativas)
        
        with col3:
            concluidas = len(df[df['status'] == 'concluida']) if 'status' in df.columns else 0
            st.metric("Conclu√≠dos", concluidas)
        
        with col4:
            pausadas = len(df[df['status'] == 'pausada']) if 'status' in df.columns else 0
            st.metric("Pausados", pausadas)
        
        st.markdown("---")
        
        # Lista de obras/departamentos
        st.markdown("### üìã Lista de Obra/Departamento")
        
        if not df.empty:
            for idx, row in df.iterrows():
                with st.container():
                    col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
                    
                    with col1:
                        st.markdown(f"**{row['id']}** - {row['nome']}")
                        st.caption(f"üìù {row['descricao']}")
                    
                    with col2:
                        status_emoji = {"ativa": "üü¢", "concluida": "‚úÖ", "pausada": "‚è∏Ô∏è", "cancelada": "‚ùå"}.get(row['status'], "‚ö™")
                        st.markdown(f"{status_emoji} **{row['status'].title()}**")
                        st.caption(f"üë§ {row['responsavel']}")
                    
                    with col3:
                        st.markdown(f"üìÖ In√≠cio: {row['data_inicio']}")
                        st.caption(f"üèÅ T√©rmino: {row['data_termino']}")
                    
                    with col4:
                        # Bot√µes de a√ß√£o
                        if st.button("‚úèÔ∏è", key=f"edit_obra_{row['id']}", help="Editar"):
                            st.session_state[f'edit_obra_{row["id"]}'] = row.to_dict()
                            st.rerun()
                        
                        if st.button("üóëÔ∏è", key=f"delete_obra_{row['id']}", help="Excluir", type="secondary"):
                            if st.session_state.get(f'confirm_delete_obra_{row["id"]}') != row['id']:
                                st.session_state[f'confirm_delete_obra_{row["id"]}'] = row['id']
                                st.warning("‚ö†Ô∏è Clique novamente para confirmar")
                            else:
                                if excluir_obra(row['id']):
                                    st.success("‚úÖ Obra/Departamento exclu√≠do!")
                                    del st.session_state[f'confirm_delete_obra_{row["id"]}']
                                    st.rerun()
                                else:
                                    st.error("‚ùå Erro ao excluir!")
                    
                    # Formul√°rio de edi√ß√£o
                    if st.session_state.get(f'edit_obra_{row["id"]}'):
                        with st.form(f"edit_form_{row['id']}"):
                            st.markdown(f"#### ‚úèÔ∏è Editar: {row['nome']}")
                            
                            col_a, col_b = st.columns(2)
                            
                            with col_a:
                                nome_edit = st.text_input("Nome *", value=row['nome'])
                                descricao_edit = st.text_area("Descri√ß√£o *", value=row['descricao'])
                                responsavel_edit = st.text_input("Respons√°vel *", value=row['responsavel'])
                            
                            with col_b:
                                status_edit = st.selectbox("Status *", ["ativa", "pausada", "concluida", "cancelada"], 
                                                         index=["ativa", "pausada", "concluida", "cancelada"].index(row['status']))
                                data_inicio_edit = st.date_input("Data In√≠cio *", 
                                                                value=pd.to_datetime(row['data_inicio']).date() if row['data_inicio'] else None)
                                data_termino_edit = st.date_input("Data T√©rmino *", 
                                                                 value=pd.to_datetime(row['data_termino']).date() if row['data_termino'] else None)
                            
                            col_save, col_cancel = st.columns(2)
                            
                            with col_save:
                                save_edit = st.form_submit_button("üíæ Salvar", type="primary")
                            
                            with col_cancel:
                                cancel_edit = st.form_submit_button("‚ùå Cancelar")
                            
                            if save_edit and nome_edit and descricao_edit and responsavel_edit:
                                success = atualizar_obra(row['id'], nome_edit, descricao_edit, status_edit, 
                                                       data_inicio_edit, data_termino_edit, responsavel_edit)
                                if success:
                                    st.success("‚úÖ Obra/Departamento atualizado!")
                                    del st.session_state[f'edit_obra_{row["id"]}']
                                    st.rerun()
                                else:
                                    st.error("‚ùå Erro ao atualizar!")
                            elif save_edit:
                                st.error("‚ùå Preencha todos os campos obrigat√≥rios!")
                            
                            if cancel_edit:
                                del st.session_state[f'edit_obra_{row["id"]}']
                                st.rerun()
                    
                    st.markdown("---")
        else:
            st.info("Nenhuma obra encontrada.")
    
    # Formul√°rio para novo local
    st.markdown("---")
    st.markdown("### ‚ûï Cadastrar Nova Obra/Departamento")
    
    with st.form("nova_obra"):
        col1, col2 = st.columns(2)
        
        with col1:
            # Op√ß√£o de usar sugest√£o ou criar novo
            opcao = st.radio("Op√ß√£o de Cadastro:", ["Usar Sugest√£o", "Criar Novo"], horizontal=True)
            
            if opcao == "Usar Sugest√£o":
                nome = st.selectbox("Selecionar Local Sugerido *", [""] + LOCAIS_SUGERIDOS, help="Escolha um local pr√©-cadastrado")
            else:
                nome = st.text_input("Nome da Obra/Departamento *", help="Nome identificador do local")
            
            descricao = st.text_area("Descri√ß√£o *", help="Descri√ß√£o detalhada do local")
            responsavel = st.text_input("Respons√°vel *", help="Nome do respons√°vel pelo local")
        
        with col2:
            status = st.selectbox("Status *", ["ativa", "pausada", "concluida", "cancelada"])
            data_inicio = st.date_input("Data de In√≠cio *")
            data_termino = st.date_input("Data de T√©rmino Prevista")
        
        submitted = st.form_submit_button("üèóÔ∏è Cadastrar Obra/Departamento", type="primary")
        
        if submitted:
            if nome and descricao and responsavel:
                success = cadastrar_obra(nome, descricao, status, data_inicio, data_termino, responsavel)
                if success:
                    st.success("‚úÖ Obra/Departamento cadastrado com sucesso!")
                    st.rerun()
                else:
                    st.error("‚ùå Erro ao cadastrar obra/departamento!")
            else:
                st.error("‚ùå Preencha todos os campos obrigat√≥rios!")
    
    # Informa√ß√µes sobre desenvolvimento
    st.markdown("---")
    st.info("""
    üí° **Funcionalidades implementadas:**
    - ‚úÖ Listagem completa de obras/departamentos
    - ‚úÖ Cadastro de novas obras/departamentos
    - ‚úÖ **Edi√ß√£o inline** com formul√°rio completo
    - ‚úÖ **Exclus√£o com confirma√ß√£o** de seguran√ßa
    - ‚úÖ Controle de status (ativa, pausada, conclu√≠da, cancelada)
    - ‚úÖ **Locais pr√©-cadastrados** (33 sugest√µes organizadas)
    - ‚úÖ Integra√ß√£o com sistema de movimenta√ß√µes
    - ‚úÖ M√©tricas em tempo real
    """)

if __name__ == "__main__":
    from pages import obras
    obras.show()