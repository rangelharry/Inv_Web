#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Invent√°rio Web - Movimenta√ß√µes
P√°gina de controle de movimenta√ß√µes
"""

import streamlit as st
import sys
import os
import pandas as pd

# Adicionar pasta raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from database.connection import DatabaseConnection
from utils.auth import get_auth, check_authentication

# Verificar autentica√ß√£o quando acessado diretamente
if not check_authentication():
    st.stop()

def get_movimentacoes_data():
    """Carregar dados das movimenta√ß√µes"""
    db = DatabaseConnection()
    
    try:
        query = """
            SELECT 
                id, codigo, origem, destino, data, responsavel, status, quantidade
            FROM movimentacoes
            ORDER BY data DESC
            LIMIT 100
        """
        
        result = db.execute_query(query)
        
        if result:
            return pd.DataFrame(result)
        else:
            return pd.DataFrame()
            
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return pd.DataFrame()

def registrar_movimentacao(codigo, origem, destino, quantidade, responsavel, observacoes=""):
    """Registrar nova movimenta√ß√£o"""
    db = DatabaseConnection()
    
    try:
        from datetime import datetime
        
        # Inserir nova movimenta√ß√£o
        query = """
            INSERT INTO movimentacoes (
                codigo, origem, destino, data, responsavel, status, quantidade, observacoes
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """
        
        params = (
            codigo,
            origem, 
            destino,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            responsavel,
            'pendente',
            quantidade,
            observacoes
        )
        
        return db.execute_update(query, params)
        
    except Exception as e:
        st.error(f"Erro ao registrar movimenta√ß√£o: {e}")
        return False

def aprovar_movimentacao(movimentacao_id):
    """Aprovar movimenta√ß√£o"""
    db = DatabaseConnection()
    
    try:
        query = "UPDATE movimentacoes SET status = 'aprovada' WHERE id = ?"
        return db.execute_update(query, (movimentacao_id,))
    except Exception as e:
        st.error(f"Erro ao aprovar movimenta√ß√£o: {e}")
        return False

def rejeitar_movimentacao(movimentacao_id):
    """Rejeitar movimenta√ß√£o"""
    db = DatabaseConnection()
    
    try:
        query = "UPDATE movimentacoes SET status = 'cancelada' WHERE id = ?"
        return db.execute_update(query, (movimentacao_id,))
    except Exception as e:
        st.error(f"Erro ao rejeitar movimenta√ß√£o: {e}")
        return False

def show():
    """Fun√ß√£o principal da p√°gina Movimenta√ß√µes"""
    
    # Verificar autentica√ß√£o
    auth = get_auth()
    if not auth.is_authenticated():
        auth.show_login_page()
        return
    
    st.markdown(f"## üìä Movimenta√ß√µes")
    st.markdown("Controle de transfer√™ncias e movimenta√ß√£o de itens")
    
    # Carregar dados
    with st.spinner("üìä Carregando movimenta√ß√µes..."):
        df = get_movimentacoes_data()
    
    if df.empty:
        st.warning("‚ö†Ô∏è Nenhuma movimenta√ß√£o encontrada no sistema")
        st.info("""
        üí° **Movimenta√ß√µes n√£o encontradas**
        
        As movimenta√ß√µes ser√£o exibidas aqui quando houver:
        - Transfer√™ncias de equipamentos
        - Movimenta√ß√µes de insumos
        - Registros de entrada/sa√≠da
        """)
    else:
        # M√©tricas b√°sicas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total de Movimenta√ß√µes", len(df))
        
        with col2:
            equipamentos = len(df[df['tipo'] == 'equipamento']) if 'tipo' in df.columns else 0
            st.metric("Equipamentos", equipamentos)
        
        with col3:
            insumos = len(df[df['tipo'] == 'insumo']) if 'tipo' in df.columns else 0
            st.metric("Insumos", insumos)
        
        with col4:
            hoje = pd.Timestamp.now().date()
            if 'data' in df.columns:
                df['data_mov'] = pd.to_datetime(df['data']).dt.date
                hoje_count = len(df[df['data_mov'] == hoje])
            else:
                hoje_count = 0
            st.metric("Hoje", hoje_count)
        
        st.markdown("---")
        
        # Lista de movimenta√ß√µes
        st.markdown("### üìã √öltimas Movimenta√ß√µes")
        
        if not df.empty:
            for idx, row in df.iterrows():
                with st.container():
                    col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
                    
                    with col1:
                        st.markdown(f"**{row['codigo']}**")
                        st.caption(f"üì¶ Qtd: {row['quantidade']}")
                    
                    with col2:
                        st.markdown(f"üìç **{row['origem']}** ‚Üí **{row['destino']}**")
                        st.caption(f"üë§ {row['responsavel']}")
                    
                    with col3:
                        status_emoji = {"concluida": "‚úÖ", "pendente": "‚è≥", "cancelada": "‚ùå", "aprovada": "üü¢"}.get(row['status'], "‚ö™")
                        st.markdown(f"{status_emoji} **{row['status'].title()}**")
                        st.caption(f"üìÖ {row['data']}")
                    
                    with col4:
                        if row['status'] == 'pendente':
                            if st.button("‚úÖ", key=f"approve_{row['id']}", help="Aprovar"):
                                if aprovar_movimentacao(row['id']):
                                    st.success("Movimenta√ß√£o aprovada!")
                                    st.rerun()
                            if st.button("‚ùå", key=f"reject_{row['id']}", help="Rejeitar"):
                                if rejeitar_movimentacao(row['id']):
                                    st.success("Movimenta√ß√£o rejeitada!")
                                    st.rerun()
                    
                    st.markdown("---")
        else:
            st.info("Nenhuma movimenta√ß√£o encontrada.")
    
    # Formul√°rio para nova movimenta√ß√£o
    st.markdown("---")
    st.markdown("### ‚ûï Nova Movimenta√ß√£o")
    
    with st.form("nova_movimentacao"):
        col1, col2 = st.columns(2)
        
        with col1:
            codigo_item = st.text_input("C√≥digo do Item *", help="C√≥digo do equipamento ou insumo")
            origem = st.selectbox("Origem *", [
                "Almoxarifado Central", "Dep√≥sito A", "Dep√≥sito B", "Oficina Principal",
                "Obra Centro", "Obra Zona Norte", "Obra Zona Sul", "Manuten√ß√£o"
            ])
            quantidade = st.number_input("Quantidade *", min_value=1, value=1)
        
        with col2:
            destino = st.selectbox("Destino *", [
                "Almoxarifado Central", "Dep√≥sito A", "Dep√≥sito B", "Oficina Principal", 
                "Obra Centro", "Obra Zona Norte", "Obra Zona Sul", "Manuten√ß√£o", "Em Tr√¢nsito"
            ])
            responsavel = st.text_input("Respons√°vel *", help="Nome do respons√°vel pela movimenta√ß√£o")
            observacoes = st.text_area("Observa√ß√µes")
        
        submitted = st.form_submit_button("üì¶ Registrar Movimenta√ß√£o", type="primary")
        
        if submitted:
            if codigo_item and origem and destino and responsavel:
                # Registrar movimenta√ß√£o
                success = registrar_movimentacao(codigo_item, origem, destino, quantidade, responsavel, observacoes)
                if success:
                    st.success("‚úÖ Movimenta√ß√£o registrada com sucesso!")
                    st.rerun()
                else:
                    st.error("‚ùå Erro ao registrar movimenta√ß√£o!")
            else:
                st.error("‚ùå Preencha todos os campos obrigat√≥rios!")
    
    # Informa√ß√µes sobre funcionalidades
    st.markdown("---")
    st.info("""
    üí° **Funcionalidades implementadas:**
    - ‚úÖ Listagem de movimenta√ß√µes
    - ‚úÖ Registro de novas movimenta√ß√µes
    - ‚úÖ Aprova√ß√µes de transfer√™ncia
    - ‚úÖ Rastreamento em tempo real
    - ‚è≥ Relat√≥rios espec√≠ficos
    """)

if __name__ == "__main__":
    from pages import movimentacoes
    movimentacoes.show()