#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Invent√°rio Web - Movimenta√ß√µes
P√°gina de controle de movimenta√ß√µes
"""

import streamlit as st
import sys
import os
import pandas as pd

# Adicionar pasta raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from database.connection import DatabaseConnection
from utils.auth import get_auth, check_authentication

# Verificar autentica√ß√£o quando acessado diretamente
if not check_authentication():
    st.stop()

def get_movimentacoes_data(filtro_status="todos"):
    """Carregar dados das movimenta√ß√µes com filtros"""
    db = DatabaseConnection()
    
    try:
        if filtro_status == "pendentes":
            query = """
                SELECT 
                    id, codigo, origem, destino, data, responsavel, status, quantidade, 
                    tabela_origem as tipo_item, observacoes
                FROM movimentacoes
                WHERE status = 'pendente'
                ORDER BY data DESC
            """
        else:
            query = """
                SELECT 
                    id, codigo, origem, destino, data, responsavel, status, quantidade,
                    tabela_origem as tipo_item, observacoes
                FROM movimentacoes
                ORDER BY data DESC
                LIMIT 100
            """
        
        result = db.execute_query(query)
        
        if result:
            return pd.DataFrame(result)
        else:
            return pd.DataFrame()
            
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return pd.DataFrame()

def get_historico_item(codigo):
    """Obter hist√≥rico completo de movimenta√ß√µes de um item espec√≠fico"""
    db = DatabaseConnection()
    
    try:
        query = """
            SELECT 
                data, origem, destino, responsavel, status, quantidade, observacoes
            FROM movimentacoes
            WHERE codigo = ?
            ORDER BY data DESC
        """
        
        result = db.execute_query(query, (codigo,))
        
        if result:
            return pd.DataFrame(result)
        else:
            return pd.DataFrame()
            
    except Exception as e:
        st.error(f"Erro ao carregar hist√≥rico: {e}")
        return pd.DataFrame()

def show_aprovacoes_pendentes(df_pendentes):
    """Exibir movimenta√ß√µes pendentes para aprova√ß√£o"""
    if df_pendentes.empty:
        st.info("‚úÖ Nenhuma movimenta√ß√£o pendente")
        return
    
    for idx, row in df_pendentes.iterrows():
        with st.container():
            col1, col2, col3, col4 = st.columns([3, 2, 2, 2])
            
            with col1:
                st.markdown(f"**üîÑ {row['codigo']}**")
                st.caption(f"üì¶ Qtd: {row['quantidade']} | Tipo: {row.get('tipo_item', 'N/A')}")
                if row.get('observacoes'):
                    st.caption(f"üí¨ {row['observacoes']}")
            
            with col2:
                st.markdown(f"üìç **{row['origem']}** ‚Üí **{row['destino']}**")
                st.caption(f"üë§ {row['responsavel']}")
            
            with col3:
                st.markdown(f"‚è≥ **PENDENTE**")
                st.caption(f"üìÖ {row['data']}")
            
            with col4:
                col_aprovar, col_rejeitar = st.columns(2)
                
                with col_aprovar:
                    if st.button("‚úÖ Aprovar", key=f"aprovar_{row['id']}", type="primary"):
                        if aprovar_movimentacao(row['id']):
                            st.success("‚úÖ Movimenta√ß√£o aprovada!")
                            st.rerun()
                        else:
                            st.error("‚ùå Erro ao aprovar!")
                
                with col_rejeitar:
                    if st.button("‚ùå Rejeitar", key=f"rejeitar_{row['id']}"):
                        # Mostrar campo para motivo
                        st.session_state[f'rejeicao_{row["id"]}'] = True
                        st.rerun()
            
            # Campo para motivo de rejei√ß√£o
            if st.session_state.get(f'rejeicao_{row["id"]}', False):
                with st.form(f"form_rejeicao_{row['id']}"):
                    motivo = st.text_input("Motivo da rejei√ß√£o:", placeholder="Ex: Item indispon√≠vel, documenta√ß√£o insuficiente...")
                    
                    col_confirmar, col_cancelar = st.columns(2)
                    
                    with col_confirmar:
                        if st.form_submit_button("‚ùå Confirmar Rejei√ß√£o"):
                            if rejeitar_movimentacao(row['id'], motivo):
                                st.success("‚úÖ Movimenta√ß√£o rejeitada!")
                                del st.session_state[f'rejeicao_{row["id"]}']
                                st.rerun()
                            else:
                                st.error("‚ùå Erro ao rejeitar!")
                    
                    with col_cancelar:
                        if st.form_submit_button("üîô Cancelar"):
                            del st.session_state[f'rejeicao_{row["id"]}']
                            st.rerun()
            
            st.markdown("---")

def registrar_movimentacao(codigo, origem, destino, quantidade, responsavel, observacoes="", auto_approved=True):
    """Registrar nova movimenta√ß√£o com valida√ß√µes e triggers autom√°ticos"""
    db = DatabaseConnection()
    
    try:
        from datetime import datetime
        
        # Validar se o item existe em alguma tabela
        item_encontrado = False
        tipo_item = ""
        
        # Verificar em equipamentos el√©tricos
        eq_eletrico = db.execute_query("SELECT codigo, localizacao FROM equipamentos_eletricos WHERE codigo = ?", (codigo,))
        if eq_eletrico:
            item_encontrado = True
            tipo_item = "equipamento_eletrico"
            localizacao_atual = eq_eletrico[0]['localizacao']
        
        # Verificar em equipamentos manuais
        if not item_encontrado:
            eq_manual = db.execute_query("SELECT codigo, localizacao FROM equipamentos_manuais WHERE codigo = ?", (codigo,))
            if eq_manual:
                item_encontrado = True
                tipo_item = "equipamento_manual"
                localizacao_atual = eq_manual[0]['localizacao']
        
        # Verificar em insumos
        if not item_encontrado:
            insumo = db.execute_query("SELECT codigo, localizacao FROM insumos WHERE codigo = ?", (codigo,))
            if insumo:
                item_encontrado = True
                tipo_item = "insumo"
                localizacao_atual = insumo[0]['localizacao']
        
        if not item_encontrado:
            st.error(f"‚ùå Item com c√≥digo '{codigo}' n√£o encontrado no sistema!")
            return False
        
        # Validar se a origem confere com a localiza√ß√£o atual
        if origem != localizacao_atual:
            st.warning(f"‚ö†Ô∏è Origem informada ({origem}) diferente da localiza√ß√£o atual ({localizacao_atual}). Usando localiza√ß√£o atual.")
            origem = localizacao_atual
        
        # Determinar status baseado no tipo de movimenta√ß√£o
        status = 'concluida' if auto_approved else 'pendente'
        
        # Movimenta√ß√µes cr√≠ticas precisam de aprova√ß√£o (equipamentos caros, transfer√™ncias externas)
        if any(palavra in destino.lower() for palavra in ['cliente', 'fornecedor', 'terceirizado']) and tipo_item.startswith('equipamento'):
            status = 'pendente'
            auto_approved = False
        
        # Registrar movimenta√ß√£o
        movimentacao_query = """
            INSERT INTO movimentacoes (
                codigo, origem, destino, data, responsavel, status, quantidade, tabela_origem, observacoes
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        
        params = (
            codigo,
            origem, 
            destino,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            responsavel,
            status,
            quantidade,
            tipo_item,
            observacoes
        )
        
        movimentacao_success = db.execute_update(movimentacao_query, params)
        
        if not movimentacao_success:
            return False
        
        # Se aprovada automaticamente, atualizar localiza√ß√£o do item
        if auto_approved and status == 'concluida':
            if tipo_item == "equipamento_eletrico":
                update_success = db.execute_update(
                    "UPDATE equipamentos_eletricos SET localizacao = ? WHERE codigo = ?",
                    (destino, codigo)
                )
            elif tipo_item == "equipamento_manual":
                update_success = db.execute_update(
                    "UPDATE equipamentos_manuais SET localizacao = ? WHERE codigo = ?",
                    (destino, codigo)
                )
            elif tipo_item == "insumo":
                update_success = db.execute_update(
                    "UPDATE insumos SET localizacao = ? WHERE codigo = ?",
                    (destino, codigo)
                )
            
            if not update_success:
                st.error("‚ùå Erro ao atualizar localiza√ß√£o do item!")
                return False
        
        # Registrar no log de auditoria
        from utils.auth import get_auth
        auth = get_auth()
        user = auth.get_current_user()
        user_id = user['id'] if user else None
        
        log_query = """
            INSERT INTO logs_sistema (
                timestamp, user_id, action, details, ip_address
            ) VALUES (?, ?, ?, ?, ?)
        """
        
        log_details = f"Movimentacao {status}: {codigo} de {origem} para {destino} (Qtd: {quantidade})"
        if not auto_approved:
            log_details += " - REQUER APROVACAO"
        
        db.execute_update(log_query, (
            datetime.now().isoformat(),
            user_id,
            'movimentacao_registro',
            log_details,
            'streamlit_session'  # Em produ√ß√£o, capturar IP real
        ))
        
        return True
        
    except Exception as e:
        st.error(f"Erro ao registrar movimenta√ß√£o: {e}")
        return False

def aprovar_movimentacao(movimentacao_id):
    """Aprovar movimenta√ß√£o e atualizar localiza√ß√£o do item"""
    db = DatabaseConnection()
    
    try:
        from datetime import datetime
        
        # Buscar dados da movimenta√ß√£o
        mov_data = db.execute_query("""
            SELECT codigo, destino, tabela_origem as tipo_item, responsavel, quantidade 
            FROM movimentacoes 
            WHERE id = ? AND status = 'pendente'
        """, (movimentacao_id,))
        
        if not mov_data:
            st.error("Movimenta√ß√£o n√£o encontrada ou j√° processada!")
            return False
        
        mov = mov_data[0]
        
        # Atualizar status da movimenta√ß√£o
        update_mov = db.execute_update(
            "UPDATE movimentacoes SET status = 'aprovada', data_aprovacao = ? WHERE id = ?",
            (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), movimentacao_id)
        )
        
        if not update_mov:
            return False
        
        # Atualizar localiza√ß√£o do item na tabela correspondente
        if mov['tipo_item'] == "equipamento_eletrico":
            update_success = db.execute_update(
                "UPDATE equipamentos_eletricos SET localizacao = ? WHERE codigo = ?",
                (mov['destino'], mov['codigo'])
            )
        elif mov['tipo_item'] == "equipamento_manual":
            update_success = db.execute_update(
                "UPDATE equipamentos_manuais SET localizacao = ? WHERE codigo = ?",
                (mov['destino'], mov['codigo'])
            )
        elif mov['tipo_item'] == "insumo":
            update_success = db.execute_update(
                "UPDATE insumos SET localizacao = ? WHERE codigo = ?",
                (mov['destino'], mov['codigo'])
            )
        
        # Log da aprova√ß√£o
        from utils.auth import get_auth
        auth = get_auth()
        user = auth.get_current_user()
        user_id = user['id'] if user else None
        
        log_query = """
            INSERT INTO logs_sistema (
                timestamp, user_id, action, details, ip_address
            ) VALUES (?, ?, ?, ?, ?)
        """
        
        db.execute_update(log_query, (
            datetime.now().isoformat(),
            user_id,
            'movimentacao_aprovacao',
            f"Aprovada movimentacao ID {movimentacao_id}: {mov['codigo']} para {mov['destino']}",
            'streamlit_session'
        ))
        
        return True
        
    except Exception as e:
        st.error(f"Erro ao aprovar movimenta√ß√£o: {e}")
        return False

def rejeitar_movimentacao(movimentacao_id, motivo=""):
    """Rejeitar movimenta√ß√£o com motivo"""
    db = DatabaseConnection()
    
    try:
        from datetime import datetime
        
        # Buscar dados da movimenta√ß√£o
        mov_data = db.execute_query("""
            SELECT codigo, origem, destino, responsavel 
            FROM movimentacoes 
            WHERE id = ? AND status = 'pendente'
        """, (movimentacao_id,))
        
        if not mov_data:
            st.error("Movimenta√ß√£o n√£o encontrada ou j√° processada!")
            return False
        
        mov = mov_data[0]
        
        # Atualizar status da movimenta√ß√£o
        update_mov = db.execute_update(
            "UPDATE movimentacoes SET status = 'rejeitada', data_rejeicao = ?, motivo_rejeicao = ? WHERE id = ?",
            (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), motivo, movimentacao_id)
        )
        
        # Log da rejei√ß√£o
        from utils.auth import get_auth
        auth = get_auth()
        user = auth.get_current_user()
        user_id = user['id'] if user else None
        
        log_query = """
            INSERT INTO logs_sistema (
                timestamp, user_id, action, details, ip_address
            ) VALUES (?, ?, ?, ?, ?)
        """
        
        db.execute_update(log_query, (
            datetime.now().isoformat(),
            user_id,
            'movimentacao_rejeicao',
            f"Rejeitada movimentacao ID {movimentacao_id}: {mov['codigo']} - Motivo: {motivo}",
            'streamlit_session'
        ))
        
        return update_mov
        
    except Exception as e:
        st.error(f"Erro ao rejeitar movimenta√ß√£o: {e}")
        return False

def show():
    """Fun√ß√£o principal da p√°gina Movimenta√ß√µes"""
    
    # Verificar autentica√ß√£o
    auth = get_auth()
    if not auth.is_authenticated():
        auth.show_login_page()
        return
    
    st.markdown(f"## üìä Movimenta√ß√µes")
    st.markdown("Controle de transfer√™ncias e movimenta√ß√£o de itens")
    
    # Verificar movimenta√ß√µes pendentes de aprova√ß√£o
    auth = get_auth()
    if auth.has_permission('admin'):
        df_pendentes = get_movimentacoes_data("pendentes")
        
        if not df_pendentes.empty:
            st.error(f"‚ö†Ô∏è **{len(df_pendentes)} MOVIMENTA√á√ïES PENDENTES DE APROVA√á√ÉO!**")
            
            with st.expander("üìã Ver Movimenta√ß√µes Pendentes", expanded=True):
                show_aprovacoes_pendentes(df_pendentes)
            
            st.markdown("---")
    
    # Carregar dados
    with st.spinner("üìä Carregando movimenta√ß√µes..."):
        df = get_movimentacoes_data()
    
    if df.empty:
        st.warning("‚ö†Ô∏è Nenhuma movimenta√ß√£o encontrada no sistema")
        st.info("""
        üí° **Movimenta√ß√µes n√£o encontradas**
        
        As movimenta√ß√µes ser√£o exibidas aqui quando houver:
        - Transfer√™ncias de equipamentos
        - Movimenta√ß√µes de insumos
        - Registros de entrada/sa√≠da
        """)
    else:
        # M√©tricas b√°sicas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total de Movimenta√ß√µes", len(df))
        
        with col2:
            equipamentos = len(df[df['tipo'] == 'equipamento']) if 'tipo' in df.columns else 0
            st.metric("Equipamentos", equipamentos)
        
        with col3:
            insumos = len(df[df['tipo'] == 'insumo']) if 'tipo' in df.columns else 0
            st.metric("Insumos", insumos)
        
        with col4:
            hoje = pd.Timestamp.now().date()
            if 'data' in df.columns:
                df['data_mov'] = pd.to_datetime(df['data']).dt.date
                hoje_count = len(df[df['data_mov'] == hoje])
            else:
                hoje_count = 0
            st.metric("Hoje", hoje_count)
        
        st.markdown("---")
        
        # Lista de movimenta√ß√µes
        st.markdown("### üìã √öltimas Movimenta√ß√µes")
        
        if not df.empty:
            for idx, row in df.iterrows():
                with st.container():
                    col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
                    
                    with col1:
                        st.markdown(f"**{row['codigo']}**")
                        st.caption(f"üì¶ Qtd: {row['quantidade']}")
                    
                    with col2:
                        st.markdown(f"üìç **{row['origem']}** ‚Üí **{row['destino']}**")
                        st.caption(f"üë§ {row['responsavel']}")
                    
                    with col3:
                        status_emoji = {"concluida": "‚úÖ", "pendente": "‚è≥", "cancelada": "‚ùå", "aprovada": "üü¢"}.get(row['status'], "‚ö™")
                        st.markdown(f"{status_emoji} **{row['status'].title()}**")
                        st.caption(f"üìÖ {row['data']}")
                    
                    with col4:
                        # Remover bot√µes de aprova√ß√£o - movimenta√ß√µes s√£o registradas diretamente
                        st.write("")  # Espa√ßo vazio
                    
                    st.markdown("---")
        else:
            st.info("Nenhuma movimenta√ß√£o encontrada.")
    
    # Formul√°rio para nova movimenta√ß√£o
    st.markdown("---")
    st.markdown("### ‚ûï Nova Movimenta√ß√£o")
    
    with st.form("nova_movimentacao"):
        col1, col2 = st.columns(2)
        
        with col1:
            codigo_item = st.text_input("C√≥digo do Item *", help="C√≥digo do equipamento ou insumo")
            
            # Locais simplificados sem refer√™ncia √†s obras
            locais_simplificados = [
                "Almoxarifado Central", "Escrit√≥rio Matriz", "Manuten√ß√£o", "Engenharia", 
                "Recursos Humanos", "Galp√£o Principal", "Dep√≥sito Filial", "√Årea Externa",
                "Obra Principal", "Cliente Externo", "Fornecedor", "Em Tr√¢nsito"
            ]
            
            origem = st.selectbox("Origem *", locais_simplificados, help="Local de origem do item")
            quantidade = st.number_input("Quantidade *", min_value=1, value=1)
        
        with col2:
            destino = st.selectbox("Destino *", locais_simplificados, help="Local de destino do item")
            responsavel = st.text_input("Respons√°vel *", help="Nome do respons√°vel pela movimenta√ß√£o")
        
        observacoes = st.text_area("Observa√ß√µes", help="Informa√ß√µes adicionais sobre a movimenta√ß√£o")
        
        submitted = st.form_submit_button("üì¶ Registrar Movimenta√ß√£o", type="primary")
        
        if submitted:
            if codigo_item and origem and destino and responsavel:
                # Registrar movimenta√ß√£o
                success = registrar_movimentacao(codigo_item, origem, destino, quantidade, responsavel, observacoes)
                if success:
                    st.success("‚úÖ Movimenta√ß√£o registrada com sucesso!")
                    st.rerun()
                else:
                    st.error("‚ùå Erro ao registrar movimenta√ß√£o!")
            else:
                st.error("‚ùå Preencha todos os campos obrigat√≥rios!")
    
    # Informa√ß√µes sobre funcionalidades
    st.markdown("---")
    st.info("""
    üí° **Funcionalidades implementadas:**
    - ‚úÖ Listagem de movimenta√ß√µes
    - ‚úÖ Registro direto de movimenta√ß√µes (sem aprova√ß√£o)
    - ‚úÖ Integra√ß√£o com locais da Obra/Departamento
    - ‚úÖ Controle de quantidade
    - ‚úÖ Rastreamento em tempo real
    """)

if __name__ == "__main__":
    from pages import movimentacoes
    movimentacoes.show()