#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Invent√°rio Web - Verificador de Instala√ß√£o
Verifica se todos os componentes da vers√£o web est√£o funcionando
"""

import os
import sys
import importlib.util

def verificar_python():
    """Verificar vers√£o do Python"""
    print("üîç Verificando Python...")
    versao = sys.version_info
    print(f"   Vers√£o: {versao.major}.{versao.minor}.{versao.micro}")
    
    if versao.major < 3 or (versao.major == 3 and versao.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        return False
    
    print("‚úÖ Vers√£o do Python compat√≠vel")
    return True

def verificar_modulos_web():
    """Verificar m√≥dulos necess√°rios para vers√£o web"""
    print("\nüîç Verificando m√≥dulos web...")
    
    modulos_necessarios = [
        ('streamlit', 'Framework web principal'),
        ('pandas', 'Manipula√ß√£o de dados'),
        ('plotly', 'Gr√°ficos interativos'),
        ('sqlite3', 'Banco de dados'),
        ('datetime', 'Data e hora'),
        ('hashlib', 'Criptografia')
    ]
    
    falhas = 0
    for modulo, descricao in modulos_necessarios:
        try:
            spec = importlib.util.find_spec(modulo)
            if spec is not None:
                print(f"   ‚úÖ {modulo} - {descricao}")
            else:
                print(f"   ‚ùå {modulo} - {descricao}")
                falhas += 1
        except Exception as e:
            print(f"   ‚ùå {modulo} - Erro: {e}")
            falhas += 1
    
    if falhas > 0:
        print(f"\n‚ùå {falhas} m√≥dulos faltando")
        print("üí° Execute: pip install streamlit pandas plotly")
        return False
    
    print("\n‚úÖ Todos os m√≥dulos necess√°rios est√£o dispon√≠veis")
    return True

def verificar_estrutura():
    """Verificar estrutura de arquivos"""
    print("\nüîç Verificando estrutura do projeto...")
    
    arquivos_necessarios = [
        'app.py',
        'requirements.txt',
        'database/connection.py',
        'utils/auth.py',
        'pages/dashboard.py',
        'pages/equipamentos_eletricos.py',
        '.streamlit/config.toml'
    ]
    
    diretorios_necessarios = [
        'pages/',
        'utils/',
        'database/',
        'static/',
        '.streamlit/'
    ]
    
    # Verificar arquivos
    falhas = 0
    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"   ‚úÖ {arquivo}")
        else:
            print(f"   ‚ùå {arquivo}")
            falhas += 1
    
    # Verificar diret√≥rios
    for diretorio in diretorios_necessarios:
        if os.path.exists(diretorio):
            print(f"   ‚úÖ {diretorio}")
        else:
            print(f"   ‚ùå {diretorio}")
            falhas += 1
    
    if falhas > 0:
        print(f"\n‚ùå {falhas} arquivos/diret√≥rios faltando")
        return False
    
    print("\n‚úÖ Estrutura do projeto completa")
    return True

def verificar_banco():
    """Verificar banco de dados"""
    print("\nüîç Verificando banco de dados...")
    
    db_path = "database/inventario.db"
    
    if os.path.exists(db_path):
        tamanho = os.path.getsize(db_path)
        print(f"   ‚úÖ Banco encontrado ({tamanho} bytes)")
        
        # Testar conex√£o
        try:
            import sqlite3
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # Testar tabelas principais
            tabelas = ['usuarios', 'equipamentos', 'insumos']
            for tabela in tabelas:
                cursor.execute(f"SELECT COUNT(*) FROM {tabela}")
                count = cursor.fetchone()[0]
                print(f"   ‚úÖ Tabela {tabela}: {count} registros")
            
            conn.close()
            print("‚úÖ Banco de dados funcionando")
            return True
            
        except Exception as e:
            print(f"   ‚ùå Erro no banco: {e}")
            return False
    else:
        print("   ‚ö†Ô∏è  Banco n√£o encontrado")
        print("   üí° Copie o banco da vers√£o desktop:")
        print("       copy \"..\\inv\\inventario.db\" \"database\\inventario.db\"")
        return False

def verificar_streamlit():
    """Verificar se Streamlit pode ser executado"""
    print("\nüîç Verificando Streamlit...")
    
    try:
        import streamlit as st
        print("   ‚úÖ Streamlit importado com sucesso")
        
        # Verificar comandos do Streamlit
        import subprocess
        result = subprocess.run([sys.executable, "-m", "streamlit", "--version"], 
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print(f"   ‚úÖ Streamlit CLI: {result.stdout.strip()}")
            return True
        else:
            print(f"   ‚ùå Erro no Streamlit CLI: {result.stderr}")
            return False
            
    except ImportError:
        print("   ‚ùå Streamlit n√£o instalado")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False

def gerar_relatorio():
    """Gerar relat√≥rio final"""
    print("\n" + "="*60)
    print("                 RELAT√ìRIO DE VERIFICA√á√ÉO")
    print("="*60)
    
    verificacoes = [
        ("Python", verificar_python()),
        ("M√≥dulos Web", verificar_modulos_web()),
        ("Estrutura", verificar_estrutura()),
        ("Banco de Dados", verificar_banco()),
        ("Streamlit", verificar_streamlit())
    ]
    
    sucessos = sum(1 for _, resultado in verificacoes if resultado)
    total = len(verificacoes)
    
    print(f"\nüìä RESUMO:")
    for nome, resultado in verificacoes:
        status = "‚úÖ OK" if resultado else "‚ùå ERRO"
        print(f"   {nome:<15} {status}")
    
    print(f"\nüìà RESULTADO: {sucessos}/{total} verifica√ß√µes passaram")
    
    if sucessos == total:
        print("\nüéâ SISTEMA WEB PRONTO PARA EXECU√á√ÉO!")
        print("\nüìã Para iniciar:")
        print("   1. Execute: instalar_web.bat (se ainda n√£o executou)")
        print("   2. Execute: executar_web.bat")
        print("   3. Acesse: http://localhost:8501")
        print("   4. Login: admin / 123456")
        print("\nüåê Para acesso online:")
        print("   - Deploy no Streamlit Cloud (gratuito)")
        print("   - Veja README.md para instru√ß√µes")
        return True
    else:
        falhas = total - sucessos
        print(f"\n‚ö†Ô∏è  {falhas} problemas encontrados")
        print("\nüí° SOLU√á√ïES:")
        
        for nome, resultado in verificacoes:
            if not resultado:
                if nome == "M√≥dulos Web":
                    print("   ‚Ä¢ Execute: pip install streamlit pandas plotly")
                elif nome == "Estrutura":
                    print("   ‚Ä¢ Verifique se est√° na pasta Inv_Web")
                    print("   ‚Ä¢ Execute instalar_web.bat para criar arquivos")
                elif nome == "Banco de Dados":
                    print("   ‚Ä¢ Copie banco da vers√£o desktop:")
                    print("     copy \"..\\inv\\inventario.db\" \"database\\inventario.db\"")
                elif nome == "Streamlit":
                    print("   ‚Ä¢ Reinstale: pip uninstall streamlit && pip install streamlit")
        
        print("\nüîÑ Execute este script novamente ap√≥s corre√ß√µes")
        return False

def main():
    """Fun√ß√£o principal"""
    print("="*60)
    print("         VERIFICA√á√ÉO - SISTEMA DE INVENT√ÅRIO WEB")
    print("="*60)
    print("üåê Verificando se a vers√£o web est√° pronta para uso")
    print()
    
    try:
        sucesso = gerar_relatorio()
        return 0 if sucesso else 1
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Verifica√ß√£o interrompida pelo usu√°rio")
        return 1
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())